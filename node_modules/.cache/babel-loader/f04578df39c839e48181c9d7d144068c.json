{"ast":null,"code":"var _jsxFileName = \"/Users/giovannycerna/Desktop/Challenge - Calculator [React]/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport * as Parser from \"./parser/formula-parser.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst parse = Parser.parse;\n\nfunction getMathSymbol(type) {\n  if (type === \"ADDITION\") return \"+\";else if (type === \"DIVISION\") return \"/\";else if (type === \"MULTIPLICATION\") return \"*\";else if (type === \"SUBTRACTION\") return \"-\";else if (type === \"PI\") return \"PI\";else return;\n}\n\nconst styles = {\n  function: {\n    display: \"inline-block\"\n  },\n  ADDITION: {\n    backgroundColor: \"green\"\n  },\n  PAREN: {\n    backgroundColor: \"RED\",\n    marginBottom: \"5\"\n  },\n  SUBTRACTION: {\n    backgroundColor: \"yellow\"\n  }\n}; //seperated to be able to add removing logic\n\nfunction customDisplay(value) {\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n\nfunction displayTree(node, size) {\n  if (!node) return null;\n\n  switch (node.type) {\n    case \"FUNCTION\":\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: styles.PAREN,\n          children: [\" \", node.name + \"(\", \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this), node.arguments.map(displayTree), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\" \", \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this);\n\n    case \"PAREN\":\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        style: styles.PAREN,\n        children: [\"(\", displayTree(node.expression), \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 14\n      }, this);\n\n    case \"VARIABLE\":\n      return customDisplay(node.name);\n\n    case \"NUMBER\":\n      return customDisplay(node.value);\n\n    case \"ADDITION\":\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        style: styles.ADDITION,\n        children: [displayTree(node.left), \" + \", displayTree(node.right)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this);\n\n    case \"DIVISION\":\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [displayTree(node.left), \" / \", displayTree(node.right)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this);\n\n    case \"SUBTRACTION\":\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        style: styles.SUBTRACTION,\n        children: [displayTree(node.left), \" - \", displayTree(node.right)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this);\n\n    case \"MULTIPLICATION\":\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [displayTree(node.left), \" * \", displayTree(node.right)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this);\n\n    default:\n      return null;\n  }\n}\n\nfunction App() {\n  _s();\n\n  let [formula, formulaChange] = useState(\"($b + SQRT (SQR($b) - 4 * $a)) / (2 * $a)\" //\"($b + SQRT (SQR($b) - 4 * $a)) / (2 * $a)\"\n  //($b+SQRT(SQR($b)-4*$a))/(2*$a)\n  //\"1 + 3 + 4\"\n  );\n  let [syntaxTree, syntaxTreeChange] = useState(\"\");\n  let [syntaxTreeJson, syntaxTreeJsonChange] = useState(null);\n  let [visualizerOutput, visualizerChange] = useState(\"\");\n  let [visualizedTree, updateVisualizedTree] = useState(null);\n\n  const updateAst = () => {\n    console.log(\"creating ast view...\");\n    const newSyntaxTree = parse(formula);\n    syntaxTreeChange(newSyntaxTree);\n    console.log(\"The ast is: \", syntaxTree);\n    syntaxTreeJsonChange(JSON.stringify(newSyntaxTree, null, 2));\n  };\n\n  const convertAstToFormula = () => {\n    console.log(\"converting ast to string...\"); //JSON.parse(syntaxTreeJson);\n\n    let formulaString = \"\"; // use Inorder traversal for tree\n\n    const createFormulaString = node => {\n      var _ref, _node$value;\n\n      if (!node) return;\n      createFormulaString(node.left);\n\n      if ((_ref = (_node$value = node.value) !== null && _node$value !== void 0 ? _node$value : getMathSymbol(node.type)) !== null && _ref !== void 0 ? _ref : node.name) {\n        var _ref2, _getMathSymbol;\n\n        formulaString += (_ref2 = (_getMathSymbol = getMathSymbol(node.type)) !== null && _getMathSymbol !== void 0 ? _getMathSymbol : node.value) !== null && _ref2 !== void 0 ? _ref2 : node.name;\n      } // special casing for parenthesis in expressions and arguments\n\n\n      if (node.expression) {\n        formulaString += \"(\";\n        createFormulaString(node.expression);\n        formulaString += \")\";\n      }\n\n      if (node.arguments) {\n        formulaString += \"(\";\n        node.arguments.forEach(createFormulaString);\n        formulaString += \")\";\n      }\n\n      createFormulaString(node.right);\n    };\n\n    createFormulaString(JSON.parse(syntaxTreeJson));\n    visualizerChange(formulaString);\n  }; // renders view from json tree\n\n\n  const renderFormulaTree = () => {\n    updateVisualizedTree(displayTree(JSON.parse(syntaxTreeJson)));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"formulizer\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Welcome to the formulizer!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Input formula\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        cols: 100,\n        rows: 8,\n        value: formula,\n        onChange: event => formulaChange(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: updateAst,\n        children: \"Parse and update AST View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Syntax tree\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      style: {\n        maxHheight: \"100px\",\n        overflowy: \"auto\",\n        backgroundColor: \"#eeeeee\"\n      },\n      children: syntaxTreeJson\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: convertAstToFormula,\n        children: \"Convert AST to Formula\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Visualizer-to-Formula\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: visualizerOutput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: renderFormulaTree,\n        children: \"Show Visual\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Visualized Tree\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: \"100px\",\n        fontSize: \"30px\"\n      },\n      children: visualizedTree\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"LJpGSEm4KzX5EPccTjsT5xMcbjo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/giovannycerna/Desktop/Challenge - Calculator [React]/src/App.js"],"names":["useState","Parser","parse","getMathSymbol","type","styles","function","display","ADDITION","backgroundColor","PAREN","marginBottom","SUBTRACTION","customDisplay","value","displayTree","node","size","name","arguments","map","expression","left","right","App","formula","formulaChange","syntaxTree","syntaxTreeChange","syntaxTreeJson","syntaxTreeJsonChange","visualizerOutput","visualizerChange","visualizedTree","updateVisualizedTree","updateAst","console","log","newSyntaxTree","JSON","stringify","convertAstToFormula","formulaString","createFormulaString","forEach","renderFormulaTree","event","target","maxHheight","overflowy","height","fontSize"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport \"./App.css\";\nimport * as Parser from \"./parser/formula-parser.js\";\nconst parse = Parser.parse;\n\nfunction getMathSymbol(type) {\n  if (type === \"ADDITION\") return \"+\";\n  else if (type === \"DIVISION\") return \"/\";\n  else if (type === \"MULTIPLICATION\") return \"*\";\n  else if (type === \"SUBTRACTION\") return \"-\";\n  else if (type === \"PI\") return \"PI\";\n  else return;\n}\n\nconst styles = {\n  function: { display: \"inline-block\" },\n  ADDITION: {\n    backgroundColor: \"green\",\n  },\n  PAREN: { backgroundColor: \"RED\", marginBottom: \"5\" },\n  SUBTRACTION: { backgroundColor: \"yellow\" },\n};\n\n//seperated to be able to add removing logic\nfunction customDisplay(value) {\n  return (\n    <span>\n      {value}\n      {/*\n        ADD CODE TO REMOVE HERE\n      <button>x</button> */}\n    </span>\n  );\n}\n\nfunction displayTree(node, size) {\n  if (!node) return null;\n\n  switch (node.type) {\n    case \"FUNCTION\":\n      return (\n        <span>\n          <span style={styles.PAREN}> {node.name + \"(\"} </span>\n          {node.arguments.map(displayTree)}\n          <span> {\")\"}</span>\n        </span>\n      );\n    case \"PAREN\":\n      return <span style={styles.PAREN}>({displayTree(node.expression)})</span>;\n\n    case \"VARIABLE\":\n      return customDisplay(node.name);\n\n    case \"NUMBER\":\n      return customDisplay(node.value);\n\n    case \"ADDITION\":\n      return (\n        <span style={styles.ADDITION}>\n          {displayTree(node.left)} + {displayTree(node.right)}\n        </span>\n      );\n\n    case \"DIVISION\":\n      return (\n        <span>\n          {displayTree(node.left)} / {displayTree(node.right)}\n        </span>\n      );\n\n    case \"SUBTRACTION\":\n      return (\n        <span style={styles.SUBTRACTION}>\n          {displayTree(node.left)} - {displayTree(node.right)}\n        </span>\n      );\n\n    case \"MULTIPLICATION\":\n      return (\n        <span>\n          {displayTree(node.left)} * {displayTree(node.right)}\n        </span>\n      );\n    default:\n      return null;\n  }\n}\n\nfunction App() {\n  let [formula, formulaChange] = useState(\n    \"($b + SQRT (SQR($b) - 4 * $a)) / (2 * $a)\"\n    //\"($b + SQRT (SQR($b) - 4 * $a)) / (2 * $a)\"\n    //($b+SQRT(SQR($b)-4*$a))/(2*$a)\n    //\"1 + 3 + 4\"\n  );\n  let [syntaxTree, syntaxTreeChange] = useState(\"\");\n  let [syntaxTreeJson, syntaxTreeJsonChange] = useState(null);\n  let [visualizerOutput, visualizerChange] = useState(\"\");\n  let [visualizedTree, updateVisualizedTree] = useState(null);\n\n  const updateAst = () => {\n    console.log(\"creating ast view...\");\n    const newSyntaxTree = parse(formula);\n    syntaxTreeChange(newSyntaxTree);\n\n    console.log(\"The ast is: \", syntaxTree);\n    syntaxTreeJsonChange(JSON.stringify(newSyntaxTree, null, 2));\n  };\n\n  const convertAstToFormula = () => {\n    console.log(\"converting ast to string...\");\n    //JSON.parse(syntaxTreeJson);\n    let formulaString = \"\";\n\n    // use Inorder traversal for tree\n    const createFormulaString = (node) => {\n      if (!node) return;\n      createFormulaString(node.left);\n      if (node.value ?? getMathSymbol(node.type) ?? node.name) {\n        formulaString += getMathSymbol(node.type) ?? node.value ?? node.name;\n      }\n      // special casing for parenthesis in expressions and arguments\n      if (node.expression) {\n        formulaString += \"(\";\n        createFormulaString(node.expression);\n        formulaString += \")\";\n      }\n      if (node.arguments) {\n        formulaString += \"(\";\n        node.arguments.forEach(createFormulaString);\n        formulaString += \")\";\n      }\n      createFormulaString(node.right);\n    };\n\n    createFormulaString(JSON.parse(syntaxTreeJson));\n    visualizerChange(formulaString);\n  };\n\n  // renders view from json tree\n  const renderFormulaTree = () => {\n    updateVisualizedTree(displayTree(JSON.parse(syntaxTreeJson)));\n  };\n\n  return (\n    <div className=\"formulizer\">\n      <h1>Welcome to the formulizer!</h1>\n      <h3>Input formula</h3>\n      <p>\n        <textarea\n          cols={100}\n          rows={8}\n          value={formula}\n          onChange={(event) => formulaChange(event.target.value)}\n        />{\" \"}\n        <br />\n      </p>\n      <p>\n        <button onClick={updateAst}>Parse and update AST View</button>\n      </p>\n      <h3>Syntax tree</h3>\n      <pre\n        style={{\n          maxHheight: \"100px\",\n          overflowy: \"auto\",\n          backgroundColor: \"#eeeeee\",\n        }}\n      >\n        {syntaxTreeJson}\n      </pre>\n      <p>\n        <button onClick={convertAstToFormula}>Convert AST to Formula</button>\n      </p>\n      <h3>Visualizer-to-Formula</h3>\n      <p>{visualizerOutput}</p>\n\n      <p>\n        <button onClick={renderFormulaTree}>Show Visual</button>\n      </p>\n      <h3>Visualized Tree</h3>\n      <div\n        style={{\n          height: \"100px\",\n          fontSize: \"30px\",\n        }}\n      >\n        {visualizedTree}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}