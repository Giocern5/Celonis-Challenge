{"ast":null,"code":"var _jsxFileName = \"/Users/giovannycerna/Desktop/Challenge - Calculator [React]/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport * as Parser from \"./parser/formula-parser.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst parse = Parser.parse;\n\nfunction App() {\n  _s();\n\n  let [formula, formulaChange] = useState(\"($b + SQRT (SQR($b) - 4 * $a)) / (2 * $a)\" //\"1 + 3 + 4\"\n  );\n  let [syntaxTree, syntaxTreeChange] = useState(\"\");\n  let [syntaxTreeJson, syntaxTreeJsonChange] = useState(null);\n  let [visualizerOutput, visualizerChange] = useState(\"\");\n\n  const updateAst = () => {\n    console.log(\"creating ast view...\");\n    const newSyntaxTree = parse(formula);\n    syntaxTreeChange(newSyntaxTree);\n    console.log(\"The ast is: \", syntaxTree);\n    syntaxTreeJsonChange(JSON.stringify(newSyntaxTree, null, 2));\n  };\n\n  const convertAstToFormula = () => {\n    console.log(\"converting ast to string...\"); //JSON.parse(syntaxTreeJson);\n\n    let formulaString = \"\";\n\n    const toFormulaString = node => {\n      if (!node) return;\n\n      switch (node.type) {\n        case \"FUNCTION\":\n          formulaString += node.name + \"(\";\n          toFormulaString(node.expression);\n          formulaString += \")\";\n\n        case \"PAREN\":\n          formulaString += \"(\";\n          toFormulaString(node.expression);\n          formulaString += \")\";\n\n        case \"VARIABLE\":\n          formulaString += node.name;\n\n        case \"NUMBER\":\n          formulaString += node.value;\n\n        case \"ADDITION\":\n          toFormulaString(node.left);\n          formulaString += \"+\";\n          toFormulaString(node.right);\n\n        case \"SUBTRACTION\":\n          toFormulaString(node.left);\n          formulaString += \"-\";\n          toFormulaString(node.right);\n\n        case \"MULTIPLICATION\":\n          toFormulaString(node.left);\n          formulaString += \"*\";\n          toFormulaString(node.right);\n\n        case \"DIVISION\":\n          toFormulaString(node.left);\n          formulaString += \"/\";\n          toFormulaString(node.right);\n\n        default:\n          return;\n      }\n    };\n\n    visualizerChange();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"formulizer\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Welcome to the formulizer!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Input formula\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        cols: 100,\n        rows: 8,\n        value: formula,\n        onChange: event => formulaChange(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: updateAst,\n        children: \"Parse and update AST View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Syntax tree\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      style: {\n        maxHheight: \"300px\",\n        overflowy: \"auto\",\n        backgroundColor: \"#eeeeee\"\n      },\n      children: syntaxTreeJson\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: convertAstToFormula,\n        children: \"Convert AST to Formula\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Visualizer-to-Formula\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: visualizerOutput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"azVscUXJ6rqpTWgCD5bXLobT3Hs=\");\n\n_c = App;\nexport default App; // const customDisplay = (value) => {\n//   return (\n//     <span>\n//       {value}\n//       <button>x</button>\n//     </span>\n//   );\n// };\n// const displayTree = (node) => {\n//   if (!node) return null;\n//   switch (node.type) {\n//     case \"FUNCTION\":\n//       return (\n//         <span>\n//           {customDisplay(node.name, true)}({node.arguments.map(displayTree)})\n//         </span>\n//       );\n//     case \"PAREN\":\n//       return <span>({displayTree(node.expression)})</span>;\n//     case \"VARIABLE\":\n//       return customDisplay(node.name); //<span> {node.name}</span>;\n//     case \"NUMBER\":\n//       return customDisplay(node.value); //<span> {node.value}</span>;\n//     case \"ADDITION\":\n//       return (\n//         <span>\n//           {displayTree(node.left)}+{displayTree(node.right)}\n//         </span>\n//       );\n//     case \"DIVISION\":\n//       return (\n//         <span>\n//           {displayTree(node.left)}/{displayTree(node.right)}\n//         </span>\n//       );\n//     case \"SUBTRACTION\":\n//       return (\n//         <span>\n//           {displayTree(node.left)}-{displayTree(node.right)}\n//         </span>\n//       );\n//     case \"MULTIPLICATION\":\n//       return (\n//         <span>\n//           {displayTree(node.left)}*{displayTree(node.right)}\n//         </span>\n//       );\n//     default:\n//       return null;\n//   }\n// };\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/giovannycerna/Desktop/Challenge - Calculator [React]/src/App.js"],"names":["useState","Parser","parse","App","formula","formulaChange","syntaxTree","syntaxTreeChange","syntaxTreeJson","syntaxTreeJsonChange","visualizerOutput","visualizerChange","updateAst","console","log","newSyntaxTree","JSON","stringify","convertAstToFormula","formulaString","toFormulaString","node","type","name","expression","value","left","right","event","target","maxHheight","overflowy","backgroundColor"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport \"./App.css\";\nimport * as Parser from \"./parser/formula-parser.js\";\nconst parse = Parser.parse;\n\nfunction App() {\n  let [formula, formulaChange] = useState(\n    \"($b + SQRT (SQR($b) - 4 * $a)) / (2 * $a)\"\n    //\"1 + 3 + 4\"\n  );\n  let [syntaxTree, syntaxTreeChange] = useState(\"\");\n  let [syntaxTreeJson, syntaxTreeJsonChange] = useState(null);\n  let [visualizerOutput, visualizerChange] = useState(\"\");\n\n  const updateAst = () => {\n    console.log(\"creating ast view...\");\n    const newSyntaxTree = parse(formula);\n    syntaxTreeChange(newSyntaxTree);\n\n    console.log(\"The ast is: \", syntaxTree);\n    syntaxTreeJsonChange(JSON.stringify(newSyntaxTree, null, 2));\n  };\n\n  const convertAstToFormula = () => {\n    console.log(\"converting ast to string...\");\n    //JSON.parse(syntaxTreeJson);\n    let formulaString = \"\";\n\n    const toFormulaString = (node) => {\n      if (!node) return;\n\n      switch (node.type) {\n        case \"FUNCTION\":\n          formulaString += node.name + \"(\";\n          toFormulaString(node.expression);\n          formulaString += \")\";\n\n        case \"PAREN\":\n          formulaString += \"(\";\n          toFormulaString(node.expression);\n          formulaString += \")\";\n\n        case \"VARIABLE\":\n          formulaString += node.name;\n\n        case \"NUMBER\":\n          formulaString += node.value;\n\n        case \"ADDITION\":\n          toFormulaString(node.left);\n          formulaString += \"+\";\n          toFormulaString(node.right);\n\n        case \"SUBTRACTION\":\n          toFormulaString(node.left);\n          formulaString += \"-\";\n          toFormulaString(node.right);\n\n        case \"MULTIPLICATION\":\n          toFormulaString(node.left);\n          formulaString += \"*\";\n          toFormulaString(node.right);\n\n        case \"DIVISION\":\n          toFormulaString(node.left);\n          formulaString += \"/\";\n          toFormulaString(node.right);\n\n        default:\n          return;\n      }\n    };\n\n    visualizerChange();\n  };\n\n  return (\n    <div className=\"formulizer\">\n      <h1>Welcome to the formulizer!</h1>\n      <h3>Input formula</h3>\n      <p>\n        <textarea\n          cols={100}\n          rows={8}\n          value={formula}\n          onChange={(event) => formulaChange(event.target.value)}\n        />{\" \"}\n        <br />\n      </p>\n      <p>\n        <button onClick={updateAst}>Parse and update AST View</button>\n      </p>\n      <h3>Syntax tree</h3>\n      <pre\n        style={{\n          maxHheight: \"300px\",\n          overflowy: \"auto\",\n          backgroundColor: \"#eeeeee\",\n        }}\n      >\n        {syntaxTreeJson}\n      </pre>\n      <p>\n        <button onClick={convertAstToFormula}>Convert AST to Formula</button>\n      </p>\n      <h3>Visualizer-to-Formula</h3>\n      <p>{visualizerOutput}</p>\n    </div>\n  );\n}\n\nexport default App;\n\n// const customDisplay = (value) => {\n//   return (\n//     <span>\n//       {value}\n//       <button>x</button>\n//     </span>\n//   );\n// };\n\n// const displayTree = (node) => {\n//   if (!node) return null;\n\n//   switch (node.type) {\n//     case \"FUNCTION\":\n//       return (\n//         <span>\n//           {customDisplay(node.name, true)}({node.arguments.map(displayTree)})\n//         </span>\n//       );\n//     case \"PAREN\":\n//       return <span>({displayTree(node.expression)})</span>;\n\n//     case \"VARIABLE\":\n//       return customDisplay(node.name); //<span> {node.name}</span>;\n\n//     case \"NUMBER\":\n//       return customDisplay(node.value); //<span> {node.value}</span>;\n\n//     case \"ADDITION\":\n//       return (\n//         <span>\n//           {displayTree(node.left)}+{displayTree(node.right)}\n//         </span>\n//       );\n\n//     case \"DIVISION\":\n//       return (\n//         <span>\n//           {displayTree(node.left)}/{displayTree(node.right)}\n//         </span>\n//       );\n\n//     case \"SUBTRACTION\":\n//       return (\n//         <span>\n//           {displayTree(node.left)}-{displayTree(node.right)}\n//         </span>\n//       );\n\n//     case \"MULTIPLICATION\":\n//       return (\n//         <span>\n//           {displayTree(node.left)}*{displayTree(node.right)}\n//         </span>\n//       );\n//     default:\n//       return null;\n//   }\n// };\n"]},"metadata":{},"sourceType":"module"}