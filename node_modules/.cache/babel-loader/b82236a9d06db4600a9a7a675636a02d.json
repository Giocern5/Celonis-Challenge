{"ast":null,"code":"var _jsxFileName = \"/Users/giovannycerna/Desktop/Challenge - Calculator [React]/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport * as Parser from \"./parser/formula-parser.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst parse = Parser.parse;\n\nfunction App() {\n  _s();\n\n  let [formula, formulaChange] = useState( //\"($b + SQRT (SQR($b) - 4 * $a)) / (2 * $a)\"\n  \"1 + 3\");\n  let [syntaxTree, syntaxTreeChange] = useState(\"\");\n  let [syntaxTreeJson, syntaxTreeJsonChange] = useState(null);\n  let [visualizerOutput, visualizerChange] = useState(\"\");\n\n  const updateAst = () => {\n    console.log(\"creating ast view...\");\n    const newSyntaxTree = parse(formula);\n    syntaxTreeChange(newSyntaxTree);\n    console.log(\"The ast is: \", syntaxTree);\n    syntaxTreeJsonChange(JSON.stringify(newSyntaxTree, null, 2));\n  };\n\n  const customDisplay = value => {\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [value, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: console.log(\"hitting cancel\"),\n        children: \"x\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this);\n  };\n\n  const displayTree = node => {\n    if (!node) return null;\n\n    switch (node.type) {\n      case \"FUNCTION\":\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [node.name, \"(\", node.arguments.map(displayTree), \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this);\n\n      case \"PAREN\":\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"(\", displayTree(node.expression), \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 16\n        }, this);\n\n      case \"VARIABLE\":\n        return customDisplay(node.name);\n      //<span> {node.name}</span>;\n\n      case \"NUMBER\":\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\" \", node.value]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 16\n        }, this);\n\n      case \"ADDITION\":\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [displayTree(node.left), \" + \", displayTree(node.right)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this);\n\n      case \"DIVISION\":\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [displayTree(node.left), \" / \", displayTree(node.right)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this);\n\n      case \"SUBTRACTION\":\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [displayTree(node.left), \" - \", displayTree(node.right)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this);\n\n      case \"MULTIPLICATION\":\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [displayTree(node.left), \" * \", displayTree(node.right)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this);\n\n      default:\n        return null;\n    }\n  };\n\n  const convertAstToFormula = () => {\n    console.log(\"converting ast to string...\");\n    visualizerChange(displayTree(JSON.parse(syntaxTreeJson)));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"formulizer\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Welcome to the formulizer!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Input formula\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        cols: 100,\n        rows: 8,\n        value: formula,\n        onChange: event => formulaChange(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: updateAst,\n        children: \"Parse and update AST View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Syntax tree\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      style: {\n        maxHheight: \"300px\",\n        overflowy: \"auto\",\n        backgroundColor: \"#eeeeee\"\n      },\n      children: syntaxTreeJson\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: convertAstToFormula,\n        children: \"Convert AST to Formula\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Visualizer-to-Formula\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: visualizerOutput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"EFoRYkA4vwnTWplkE4I+Oq27FGM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/giovannycerna/Desktop/Challenge - Calculator [React]/src/App.js"],"names":["useState","Parser","parse","App","formula","formulaChange","syntaxTree","syntaxTreeChange","syntaxTreeJson","syntaxTreeJsonChange","visualizerOutput","visualizerChange","updateAst","console","log","newSyntaxTree","JSON","stringify","customDisplay","value","displayTree","node","type","name","arguments","map","expression","left","right","convertAstToFormula","event","target","maxHheight","overflowy","backgroundColor"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport \"./App.css\";\nimport * as Parser from \"./parser/formula-parser.js\";\nconst parse = Parser.parse;\n\nfunction App() {\n  let [formula, formulaChange] = useState(\n    //\"($b + SQRT (SQR($b) - 4 * $a)) / (2 * $a)\"\n    \"1 + 3\"\n  );\n  let [syntaxTree, syntaxTreeChange] = useState(\"\");\n  let [syntaxTreeJson, syntaxTreeJsonChange] = useState(null);\n  let [visualizerOutput, visualizerChange] = useState(\"\");\n\n  const updateAst = () => {\n    console.log(\"creating ast view...\");\n    const newSyntaxTree = parse(formula);\n    syntaxTreeChange(newSyntaxTree);\n\n    console.log(\"The ast is: \", syntaxTree);\n    syntaxTreeJsonChange(JSON.stringify(newSyntaxTree, null, 2));\n  };\n\n  const customDisplay = (value) => {\n    return (\n      <span>\n        {value}\n        <button onClick={console.log(\"hitting cancel\")}>x</button>\n      </span>\n    );\n  };\n\n  const displayTree = (node) => {\n    if (!node) return null;\n\n    switch (node.type) {\n      case \"FUNCTION\":\n        return (\n          <span>\n            {node.name}({node.arguments.map(displayTree)})\n          </span>\n        );\n      case \"PAREN\":\n        return <span>({displayTree(node.expression)})</span>;\n\n      case \"VARIABLE\":\n        return customDisplay(node.name); //<span> {node.name}</span>;\n\n      case \"NUMBER\":\n        return <span> {node.value}</span>;\n\n      case \"ADDITION\":\n        return (\n          <span>\n            {displayTree(node.left)} + {displayTree(node.right)}\n          </span>\n        );\n\n      case \"DIVISION\":\n        return (\n          <span>\n            {displayTree(node.left)} / {displayTree(node.right)}\n          </span>\n        );\n\n      case \"SUBTRACTION\":\n        return (\n          <span>\n            {displayTree(node.left)} - {displayTree(node.right)}\n          </span>\n        );\n\n      case \"MULTIPLICATION\":\n        return (\n          <span>\n            {displayTree(node.left)} * {displayTree(node.right)}\n          </span>\n        );\n      default:\n        return null;\n    }\n  };\n\n  const convertAstToFormula = () => {\n    console.log(\"converting ast to string...\");\n    visualizerChange(displayTree(JSON.parse(syntaxTreeJson)));\n  };\n\n  return (\n    <div className=\"formulizer\">\n      <h1>Welcome to the formulizer!</h1>\n      <h3>Input formula</h3>\n      <p>\n        <textarea\n          cols={100}\n          rows={8}\n          value={formula}\n          onChange={(event) => formulaChange(event.target.value)}\n        />{\" \"}\n        <br />\n      </p>\n      <p>\n        <button onClick={updateAst}>Parse and update AST View</button>\n      </p>\n      <h3>Syntax tree</h3>\n      <pre\n        style={{\n          maxHheight: \"300px\",\n          overflowy: \"auto\",\n          backgroundColor: \"#eeeeee\",\n        }}\n      >\n        {syntaxTreeJson}\n      </pre>\n      <p>\n        <button onClick={convertAstToFormula}>Convert AST to Formula</button>\n      </p>\n      <h3>Visualizer-to-Formula</h3>\n      <p>{visualizerOutput}</p>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}