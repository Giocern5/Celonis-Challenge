{"ast":null,"code":"/* parser generated by jison 0.4.18 */\n\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar formulaParser = function () {\n  var o = function (k, v, o, l) {\n    for (o = o || {}, l = k.length; l--; o[k[l]] = v);\n\n    return o;\n  },\n      $V0 = [1, 3],\n      $V1 = [1, 4],\n      $V2 = [1, 5],\n      $V3 = [1, 6],\n      $V4 = [1, 7],\n      $V5 = [1, 8],\n      $V6 = [1, 9],\n      $V7 = [1, 11],\n      $V8 = [1, 12],\n      $V9 = [1, 13],\n      $Va = [1, 14],\n      $Vb = [1, 15],\n      $Vc = [5, 6, 7, 8, 9, 10, 12, 19],\n      $Vd = [5, 6, 7, 12, 19],\n      $Ve = [5, 6, 7, 8, 9, 12, 19],\n      $Vf = [12, 19];\n\n  var parser = {\n    trace: function trace() {},\n    yy: {},\n    symbols_: {\n      \"error\": 2,\n      \"expressions\": 3,\n      \"e\": 4,\n      \"EOF\": 5,\n      \"+\": 6,\n      \"-\": 7,\n      \"*\": 8,\n      \"/\": 9,\n      \"^\": 10,\n      \"(\": 11,\n      \")\": 12,\n      \"NUMBER\": 13,\n      \"E\": 14,\n      \"PI\": 15,\n      \"VARIABLE\": 16,\n      \"IDENTIFIER\": 17,\n      \"arguments\": 18,\n      \",\": 19,\n      \"$accept\": 0,\n      \"$end\": 1\n    },\n    terminals_: {\n      2: \"error\",\n      5: \"EOF\",\n      6: \"+\",\n      7: \"-\",\n      8: \"*\",\n      9: \"/\",\n      10: \"^\",\n      11: \"(\",\n      12: \")\",\n      13: \"NUMBER\",\n      14: \"E\",\n      15: \"PI\",\n      16: \"VARIABLE\",\n      17: \"IDENTIFIER\",\n      19: \",\"\n    },\n    productions_: [0, [3, 2], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 2], [4, 3], [4, 1], [4, 1], [4, 1], [4, 1], [4, 3], [4, 4], [18, 1], [18, 3]],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate\n    /* action[1] */\n    , $$\n    /* vstack */\n    , _$\n    /* lstack */\n    ) {\n      /* this == yyval */\n      var $0 = $$.length - 1;\n\n      switch (yystate) {\n        case 1:\n          return $$[$0 - 1];\n          break;\n\n        case 2:\n          this.$ = {\n            type: 'ADDITION',\n            left: $$[$0 - 2],\n            right: $$[$0]\n          };\n          break;\n\n        case 3:\n          this.$ = {\n            type: 'SUBTRACTION',\n            left: $$[$0 - 2],\n            right: $$[$0]\n          };\n          break;\n\n        case 4:\n          this.$ = {\n            type: 'MULTIPLICATION',\n            left: $$[$0 - 2],\n            right: $$[$0]\n          };\n          break;\n\n        case 5:\n          this.$ = {\n            type: 'DIVISION',\n            left: $$[$0 - 2],\n            right: $$[$0]\n          };\n          break;\n\n        case 6:\n          this.$ = {\n            type: 'POWER',\n            expression: $$[$0 - 2],\n            power: $$[$0]\n          };\n          break;\n\n        case 7:\n          this.$ = {\n            type: 'NEGATION',\n            expression: $$[$0]\n          };\n          break;\n\n        case 8:\n          this.$ = {\n            type: 'PAREN',\n            expression: $$[$0 - 1]\n          };\n          break;\n\n        case 9:\n          this.$ = {\n            type: 'NUMBER',\n            value: Number(yytext)\n          };\n          break;\n\n        case 10:\n          this.$ = {\n            type: 'E',\n            value: Math.E\n          };\n          break;\n\n        case 11:\n          this.$ = {\n            type: 'PI',\n            value: Math.PI\n          };\n          break;\n\n        case 12:\n          this.$ = {\n            type: 'VARIABLE',\n            name: yytext\n          };\n          break;\n\n        case 13:\n          this.$ = {\n            type: 'FUNCTION',\n            name: $$[$0 - 2],\n            arguments: []\n          };\n          break;\n\n        case 14:\n          this.$ = {\n            type: 'FUNCTION',\n            name: $$[$0 - 3],\n            arguments: $$[$0 - 1]\n          };\n          break;\n\n        case 15:\n          this.$ = [$$[$0]];\n          break;\n\n        case 16:\n          this.$ = $$[$0 - 2].concat($$[$0 - 1]);\n          break;\n      }\n    },\n    table: [{\n      3: 1,\n      4: 2,\n      7: $V0,\n      11: $V1,\n      13: $V2,\n      14: $V3,\n      15: $V4,\n      16: $V5,\n      17: $V6\n    }, {\n      1: [3]\n    }, {\n      5: [1, 10],\n      6: $V7,\n      7: $V8,\n      8: $V9,\n      9: $Va,\n      10: $Vb\n    }, {\n      4: 16,\n      7: $V0,\n      11: $V1,\n      13: $V2,\n      14: $V3,\n      15: $V4,\n      16: $V5,\n      17: $V6\n    }, {\n      4: 17,\n      7: $V0,\n      11: $V1,\n      13: $V2,\n      14: $V3,\n      15: $V4,\n      16: $V5,\n      17: $V6\n    }, o($Vc, [2, 9]), o($Vc, [2, 10]), o($Vc, [2, 11]), o($Vc, [2, 12]), {\n      11: [1, 18]\n    }, {\n      1: [2, 1]\n    }, {\n      4: 19,\n      7: $V0,\n      11: $V1,\n      13: $V2,\n      14: $V3,\n      15: $V4,\n      16: $V5,\n      17: $V6\n    }, {\n      4: 20,\n      7: $V0,\n      11: $V1,\n      13: $V2,\n      14: $V3,\n      15: $V4,\n      16: $V5,\n      17: $V6\n    }, {\n      4: 21,\n      7: $V0,\n      11: $V1,\n      13: $V2,\n      14: $V3,\n      15: $V4,\n      16: $V5,\n      17: $V6\n    }, {\n      4: 22,\n      7: $V0,\n      11: $V1,\n      13: $V2,\n      14: $V3,\n      15: $V4,\n      16: $V5,\n      17: $V6\n    }, {\n      4: 23,\n      7: $V0,\n      11: $V1,\n      13: $V2,\n      14: $V3,\n      15: $V4,\n      16: $V5,\n      17: $V6\n    }, o($Vc, [2, 7]), {\n      6: $V7,\n      7: $V8,\n      8: $V9,\n      9: $Va,\n      10: $Vb,\n      12: [1, 24]\n    }, {\n      4: 27,\n      7: $V0,\n      11: $V1,\n      12: [1, 25],\n      13: $V2,\n      14: $V3,\n      15: $V4,\n      16: $V5,\n      17: $V6,\n      18: 26\n    }, o($Vd, [2, 2], {\n      8: $V9,\n      9: $Va,\n      10: $Vb\n    }), o($Vd, [2, 3], {\n      8: $V9,\n      9: $Va,\n      10: $Vb\n    }), o($Ve, [2, 4], {\n      10: $Vb\n    }), o($Ve, [2, 5], {\n      10: $Vb\n    }), o($Vc, [2, 6]), o($Vc, [2, 8]), o($Vc, [2, 13]), {\n      12: [1, 28],\n      19: [1, 29]\n    }, o($Vf, [2, 15], {\n      6: $V7,\n      7: $V8,\n      8: $V9,\n      9: $Va,\n      10: $Vb\n    }), o($Vc, [2, 14]), {\n      4: 30,\n      7: $V0,\n      11: $V1,\n      13: $V2,\n      14: $V3,\n      15: $V4,\n      16: $V5,\n      17: $V6\n    }, o($Vf, [2, 16], {\n      6: $V7,\n      7: $V8,\n      8: $V9,\n      9: $Va,\n      10: $Vb\n    })],\n    defaultActions: {\n      10: [2, 1]\n    },\n    parseError: function parseError(str, hash) {\n      if (hash.recoverable) {\n        this.trace(str);\n      } else {\n        var error = new Error(str);\n        error.hash = hash;\n        throw error;\n      }\n    },\n    parse: function parse(input) {\n      var self = this,\n          stack = [0],\n          tstack = [],\n          vstack = [null],\n          lstack = [],\n          table = this.table,\n          yytext = '',\n          yylineno = 0,\n          yyleng = 0,\n          recovering = 0,\n          TERROR = 2,\n          EOF = 1;\n      var args = lstack.slice.call(arguments, 1);\n      var lexer = Object.create(this.lexer);\n      var sharedState = {\n        yy: {}\n      };\n\n      for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n          sharedState.yy[k] = this.yy[k];\n        }\n      }\n\n      lexer.setInput(input, sharedState.yy);\n      sharedState.yy.lexer = lexer;\n      sharedState.yy.parser = this;\n\n      if (typeof lexer.yylloc == 'undefined') {\n        lexer.yylloc = {};\n      }\n\n      var yyloc = lexer.yylloc;\n      lstack.push(yyloc);\n      var ranges = lexer.options && lexer.options.ranges;\n\n      if (typeof sharedState.yy.parseError === 'function') {\n        this.parseError = sharedState.yy.parseError;\n      } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n      }\n\n      function popStack(n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n      }\n\n      _token_stack: var lex = function () {\n        var token;\n        token = lexer.lex() || EOF;\n\n        if (typeof token !== 'number') {\n          token = self.symbols_[token] || token;\n        }\n\n        return token;\n      };\n\n      var symbol,\n          preErrorSymbol,\n          state,\n          action,\n          a,\n          r,\n          yyval = {},\n          p,\n          len,\n          newState,\n          expected;\n\n      while (true) {\n        state = stack[stack.length - 1];\n\n        if (this.defaultActions[state]) {\n          action = this.defaultActions[state];\n        } else {\n          if (symbol === null || typeof symbol == 'undefined') {\n            symbol = lex();\n          }\n\n          action = table[state] && table[state][symbol];\n        }\n\n        if (typeof action === 'undefined' || !action.length || !action[0]) {\n          var errStr = '';\n          expected = [];\n\n          for (p in table[state]) {\n            if (this.terminals_[p] && p > TERROR) {\n              expected.push('\\'' + this.terminals_[p] + '\\'');\n            }\n          }\n\n          if (lexer.showPosition) {\n            errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\n          } else {\n            errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\n          }\n\n          this.parseError(errStr, {\n            text: lexer.match,\n            token: this.terminals_[symbol] || symbol,\n            line: lexer.yylineno,\n            loc: yyloc,\n            expected: expected\n          });\n        }\n\n        if (action[0] instanceof Array && action.length > 1) {\n          throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);\n        }\n\n        switch (action[0]) {\n          case 1:\n            stack.push(symbol);\n            vstack.push(lexer.yytext);\n            lstack.push(lexer.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n\n            if (!preErrorSymbol) {\n              yyleng = lexer.yyleng;\n              yytext = lexer.yytext;\n              yylineno = lexer.yylineno;\n              yyloc = lexer.yylloc;\n\n              if (recovering > 0) {\n                recovering--;\n              }\n            } else {\n              symbol = preErrorSymbol;\n              preErrorSymbol = null;\n            }\n\n            break;\n\n          case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n              first_line: lstack[lstack.length - (len || 1)].first_line,\n              last_line: lstack[lstack.length - 1].last_line,\n              first_column: lstack[lstack.length - (len || 1)].first_column,\n              last_column: lstack[lstack.length - 1].last_column\n            };\n\n            if (ranges) {\n              yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];\n            }\n\n            r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));\n\n            if (typeof r !== 'undefined') {\n              return r;\n            }\n\n            if (len) {\n              stack = stack.slice(0, -1 * len * 2);\n              vstack = vstack.slice(0, -1 * len);\n              lstack = lstack.slice(0, -1 * len);\n            }\n\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n\n          case 3:\n            return true;\n        }\n      }\n\n      return true;\n    }\n  };\n  /* generated by jison-lex 0.3.4 */\n\n  var lexer = function () {\n    var lexer = {\n      EOF: 1,\n      parseError: function parseError(str, hash) {\n        if (this.yy.parser) {\n          this.yy.parser.parseError(str, hash);\n        } else {\n          throw new Error(str);\n        }\n      },\n      // resets the lexer, sets new input\n      setInput: function (input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n          first_line: 1,\n          first_column: 0,\n          last_line: 1,\n          last_column: 0\n        };\n\n        if (this.options.ranges) {\n          this.yylloc.range = [0, 0];\n        }\n\n        this.offset = 0;\n        return this;\n      },\n      // consumes and returns one char from the input\n      input: function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n\n        if (lines) {\n          this.yylineno++;\n          this.yylloc.last_line++;\n        } else {\n          this.yylloc.last_column++;\n        }\n\n        if (this.options.ranges) {\n          this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n      },\n      // unshifts one char (or a string) into the input\n      unput: function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len); //this.yyleng -= len;\n\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n          this.yylineno -= lines.length - 1;\n        }\n\n        var r = this.yylloc.range;\n        this.yylloc = {\n          first_line: this.yylloc.first_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.first_column,\n          last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n          this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n\n        this.yyleng = this.yytext.length;\n        return this;\n      },\n      // When called from action, caches matched text and appends it on next action\n      more: function () {\n        this._more = true;\n        return this;\n      },\n      // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\n      reject: function () {\n        if (this.options.backtrack_lexer) {\n          this._backtrack = true;\n        } else {\n          return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n\n        return this;\n      },\n      // retain first n characters of the match\n      less: function (n) {\n        this.unput(this.match.slice(n));\n      },\n      // displays already matched input, i.e. for error messages\n      pastInput: function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\\n/g, \"\");\n      },\n      // displays upcoming input, i.e. for error messages\n      upcomingInput: function () {\n        var next = this.match;\n\n        if (next.length < 20) {\n          next += this._input.substr(0, 20 - next.length);\n        }\n\n        return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n      },\n      // displays the character position where the lexing error occurred, i.e. for error messages\n      showPosition: function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n      },\n      // test the lexed token: return FALSE when not a match, otherwise return token\n      test_match: function (match, indexed_rule) {\n        var token, lines, backup;\n\n        if (this.options.backtrack_lexer) {\n          // save context\n          backup = {\n            yylineno: this.yylineno,\n            yylloc: {\n              first_line: this.yylloc.first_line,\n              last_line: this.last_line,\n              first_column: this.yylloc.first_column,\n              last_column: this.yylloc.last_column\n            },\n            yytext: this.yytext,\n            match: this.match,\n            matches: this.matches,\n            matched: this.matched,\n            yyleng: this.yyleng,\n            offset: this.offset,\n            _more: this._more,\n            _input: this._input,\n            yy: this.yy,\n            conditionStack: this.conditionStack.slice(0),\n            done: this.done\n          };\n\n          if (this.options.ranges) {\n            backup.yylloc.range = this.yylloc.range.slice(0);\n          }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n\n        if (lines) {\n          this.yylineno += lines.length;\n        }\n\n        this.yylloc = {\n          first_line: this.yylloc.last_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.last_column,\n          last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length : this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n\n        if (this.options.ranges) {\n          this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n\n        if (this.done && this._input) {\n          this.done = false;\n        }\n\n        if (token) {\n          return token;\n        } else if (this._backtrack) {\n          // recover context\n          for (var k in backup) {\n            this[k] = backup[k];\n          }\n\n          return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n\n        return false;\n      },\n      // return next match in input\n      next: function () {\n        if (this.done) {\n          return this.EOF;\n        }\n\n        if (!this._input) {\n          this.done = true;\n        }\n\n        var token, match, tempMatch, index;\n\n        if (!this._more) {\n          this.yytext = '';\n          this.match = '';\n        }\n\n        var rules = this._currentRules();\n\n        for (var i = 0; i < rules.length; i++) {\n          tempMatch = this._input.match(this.rules[rules[i]]);\n\n          if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n            match = tempMatch;\n            index = i;\n\n            if (this.options.backtrack_lexer) {\n              token = this.test_match(tempMatch, rules[i]);\n\n              if (token !== false) {\n                return token;\n              } else if (this._backtrack) {\n                match = false;\n                continue; // rule action called reject() implying a rule MISmatch.\n              } else {\n                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                return false;\n              }\n            } else if (!this.options.flex) {\n              break;\n            }\n          }\n        }\n\n        if (match) {\n          token = this.test_match(match, rules[index]);\n\n          if (token !== false) {\n            return token;\n          } // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n\n\n          return false;\n        }\n\n        if (this._input === \"\") {\n          return this.EOF;\n        } else {\n          return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n      },\n      // return next match that has a token\n      lex: function lex() {\n        var r = this.next();\n\n        if (r) {\n          return r;\n        } else {\n          return this.lex();\n        }\n      },\n      // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\n      begin: function begin(condition) {\n        this.conditionStack.push(condition);\n      },\n      // pop the previously active lexer condition state off the condition stack\n      popState: function popState() {\n        var n = this.conditionStack.length - 1;\n\n        if (n > 0) {\n          return this.conditionStack.pop();\n        } else {\n          return this.conditionStack[0];\n        }\n      },\n      // produce the lexer rule set which is active for the currently active lexer condition state\n      _currentRules: function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n          return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n          return this.conditions[\"INITIAL\"].rules;\n        }\n      },\n      // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\n      topState: function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n\n        if (n >= 0) {\n          return this.conditionStack[n];\n        } else {\n          return \"INITIAL\";\n        }\n      },\n      // alias for begin(condition)\n      pushState: function pushState(condition) {\n        this.begin(condition);\n      },\n      // return the number of states currently on the stack\n      stateStackSize: function stateStackSize() {\n        return this.conditionStack.length;\n      },\n      options: {},\n      performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {\n        var YYSTATE = YY_START;\n\n        switch ($avoiding_name_collisions) {\n          case 0:\n            /* skip whitespace */\n            break;\n\n          case 1:\n            return 13;\n            break;\n\n          case 2:\n            return 8;\n            break;\n\n          case 3:\n            return 9;\n            break;\n\n          case 4:\n            return 7;\n            break;\n\n          case 5:\n            return 6;\n            break;\n\n          case 6:\n            return 10;\n            break;\n\n          case 7:\n            return 11;\n            break;\n\n          case 8:\n            return 12;\n            break;\n\n          case 9:\n            return 15;\n            break;\n\n          case 10:\n            return 14;\n            break;\n\n          case 11:\n            return 17;\n            break;\n\n          case 12:\n            return 16;\n            break;\n\n          case 13:\n            return 5;\n            break;\n        }\n      },\n      rules: [/^(?:\\s+)/, /^(?:[0-9]+(\\.[0-9]+)?\\b)/, /^(?:\\*)/, /^(?:\\/)/, /^(?:-)/, /^(?:\\+)/, /^(?:\\^)/, /^(?:\\()/, /^(?:\\))/, /^(?:PI\\b)/, /^(?:E\\b)/, /^(?:[a-zA-Z][a-zA-Z0-9]*)/, /^(?:\\$[a-zA-Z0-9])/, /^(?:$)/],\n      conditions: {\n        \"INITIAL\": {\n          \"rules\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],\n          \"inclusive\": true\n        }\n      }\n    };\n    return lexer;\n  }();\n\n  parser.lexer = lexer;\n\n  function Parser() {\n    this.yy = {};\n  }\n\n  Parser.prototype = parser;\n  parser.Parser = Parser;\n  return new Parser();\n}();\n\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\n  exports.parser = formulaParser;\n  exports.Parser = formulaParser.Parser;\n\n  exports.parse = function () {\n    return formulaParser.parse.apply(formulaParser, arguments);\n  };\n}","map":{"version":3,"sources":["/Users/giovannycerna/Desktop/Challenge - Calculator [React]/src/parser/formula-parser.js"],"names":["formulaParser","o","k","v","l","length","$V0","$V1","$V2","$V3","$V4","$V5","$V6","$V7","$V8","$V9","$Va","$Vb","$Vc","$Vd","$Ve","$Vf","parser","trace","yy","symbols_","terminals_","productions_","performAction","anonymous","yytext","yyleng","yylineno","yystate","$$","_$","$0","$","type","left","right","expression","power","value","Number","Math","E","PI","name","arguments","concat","table","defaultActions","parseError","str","hash","recoverable","error","Error","parse","input","self","stack","tstack","vstack","lstack","recovering","TERROR","EOF","args","slice","call","lexer","Object","create","sharedState","prototype","hasOwnProperty","setInput","yylloc","yyloc","push","ranges","options","getPrototypeOf","popStack","n","_token_stack","lex","token","symbol","preErrorSymbol","state","action","a","r","yyval","p","len","newState","expected","errStr","showPosition","join","text","match","line","loc","Array","first_line","last_line","first_column","last_column","range","apply","_input","_more","_backtrack","done","matched","conditionStack","offset","ch","lines","unput","split","substr","oldLines","more","reject","backtrack_lexer","less","pastInput","past","replace","upcomingInput","next","pre","c","test_match","indexed_rule","backup","matches","tempMatch","index","rules","_currentRules","i","flex","begin","condition","popState","pop","conditions","topState","abs","pushState","stateStackSize","yy_","$avoiding_name_collisions","YY_START","YYSTATE","Parser","require","exports"],"mappings":"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","sourcesContent":["/* parser generated by jison 0.4.18 */\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar formulaParser = (function () {\n    var o = function (k, v, o, l) { for (o = o || {}, l = k.length; l--; o[k[l]] = v); return o }, $V0 = [1, 3], $V1 = [1, 4], $V2 = [1, 5], $V3 = [1, 6], $V4 = [1, 7], $V5 = [1, 8], $V6 = [1, 9], $V7 = [1, 11], $V8 = [1, 12], $V9 = [1, 13], $Va = [1, 14], $Vb = [1, 15], $Vc = [5, 6, 7, 8, 9, 10, 12, 19], $Vd = [5, 6, 7, 12, 19], $Ve = [5, 6, 7, 8, 9, 12, 19], $Vf = [12, 19];\n    var parser = {\n        trace: function trace() { },\n        yy: {},\n        symbols_: { \"error\": 2, \"expressions\": 3, \"e\": 4, \"EOF\": 5, \"+\": 6, \"-\": 7, \"*\": 8, \"/\": 9, \"^\": 10, \"(\": 11, \")\": 12, \"NUMBER\": 13, \"E\": 14, \"PI\": 15, \"VARIABLE\": 16, \"IDENTIFIER\": 17, \"arguments\": 18, \",\": 19, \"$accept\": 0, \"$end\": 1 },\n        terminals_: { 2: \"error\", 5: \"EOF\", 6: \"+\", 7: \"-\", 8: \"*\", 9: \"/\", 10: \"^\", 11: \"(\", 12: \")\", 13: \"NUMBER\", 14: \"E\", 15: \"PI\", 16: \"VARIABLE\", 17: \"IDENTIFIER\", 19: \",\" },\n        productions_: [0, [3, 2], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 2], [4, 3], [4, 1], [4, 1], [4, 1], [4, 1], [4, 3], [4, 4], [18, 1], [18, 3]],\n        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n            /* this == yyval */\n\n            var $0 = $$.length - 1;\n            switch (yystate) {\n                case 1:\n                    return $$[$0 - 1];\n                    break;\n                case 2:\n\n                    this.$ = {\n                        type: 'ADDITION',\n                        left: $$[$0 - 2],\n                        right: $$[$0]\n                    };\n\n                    break;\n                case 3:\n\n                    this.$ = {\n                        type: 'SUBTRACTION',\n                        left: $$[$0 - 2],\n                        right: $$[$0]\n                    };\n\n                    break;\n                case 4:\n\n                    this.$ = {\n                        type: 'MULTIPLICATION',\n                        left: $$[$0 - 2],\n                        right: $$[$0]\n                    };\n\n                    break;\n                case 5:\n\n                    this.$ = {\n                        type: 'DIVISION',\n                        left: $$[$0 - 2],\n                        right: $$[$0]\n                    };\n\n                    break;\n                case 6:\n\n                    this.$ = {\n                        type: 'POWER',\n                        expression: $$[$0 - 2],\n                        power: $$[$0]\n                    };\n\n                    break;\n                case 7:\n\n                    this.$ = {\n                        type: 'NEGATION',\n                        expression: $$[$0]\n                    }\n\n                    break;\n                case 8:\n\n                    this.$ = {\n                        type: 'PAREN',\n                        expression: $$[$0 - 1]\n                    };\n\n                    break;\n                case 9:\n\n                    this.$ = {\n                        type: 'NUMBER',\n                        value: Number(yytext)\n                    };\n\n                    break;\n                case 10:\n\n                    this.$ = {\n                        type: 'E',\n                        value: Math.E\n                    };\n\n                    break;\n                case 11:\n\n                    this.$ = {\n                        type: 'PI',\n                        value: Math.PI\n                    };\n\n                    break;\n                case 12:\n\n                    this.$ = {\n                        type: 'VARIABLE',\n                        name: yytext\n                    };\n\n                    break;\n                case 13:\n\n                    this.$ = {\n                        type: 'FUNCTION',\n                        name: $$[$0 - 2],\n                        arguments: []\n                    };\n\n                    break;\n                case 14:\n\n                    this.$ = {\n                        type: 'FUNCTION',\n                        name: $$[$0 - 3],\n                        arguments: $$[$0 - 1]\n                    };\n\n                    break;\n                case 15:\n                    this.$ = [$$[$0]];\n                    break;\n                case 16:\n                    this.$ = $$[$0 - 2].concat($$[$0 - 1]);\n                    break;\n            }\n        },\n        table: [{ 3: 1, 4: 2, 7: $V0, 11: $V1, 13: $V2, 14: $V3, 15: $V4, 16: $V5, 17: $V6 }, { 1: [3] }, { 5: [1, 10], 6: $V7, 7: $V8, 8: $V9, 9: $Va, 10: $Vb }, { 4: 16, 7: $V0, 11: $V1, 13: $V2, 14: $V3, 15: $V4, 16: $V5, 17: $V6 }, { 4: 17, 7: $V0, 11: $V1, 13: $V2, 14: $V3, 15: $V4, 16: $V5, 17: $V6 }, o($Vc, [2, 9]), o($Vc, [2, 10]), o($Vc, [2, 11]), o($Vc, [2, 12]), { 11: [1, 18] }, { 1: [2, 1] }, { 4: 19, 7: $V0, 11: $V1, 13: $V2, 14: $V3, 15: $V4, 16: $V5, 17: $V6 }, { 4: 20, 7: $V0, 11: $V1, 13: $V2, 14: $V3, 15: $V4, 16: $V5, 17: $V6 }, { 4: 21, 7: $V0, 11: $V1, 13: $V2, 14: $V3, 15: $V4, 16: $V5, 17: $V6 }, { 4: 22, 7: $V0, 11: $V1, 13: $V2, 14: $V3, 15: $V4, 16: $V5, 17: $V6 }, { 4: 23, 7: $V0, 11: $V1, 13: $V2, 14: $V3, 15: $V4, 16: $V5, 17: $V6 }, o($Vc, [2, 7]), { 6: $V7, 7: $V8, 8: $V9, 9: $Va, 10: $Vb, 12: [1, 24] }, { 4: 27, 7: $V0, 11: $V1, 12: [1, 25], 13: $V2, 14: $V3, 15: $V4, 16: $V5, 17: $V6, 18: 26 }, o($Vd, [2, 2], { 8: $V9, 9: $Va, 10: $Vb }), o($Vd, [2, 3], { 8: $V9, 9: $Va, 10: $Vb }), o($Ve, [2, 4], { 10: $Vb }), o($Ve, [2, 5], { 10: $Vb }), o($Vc, [2, 6]), o($Vc, [2, 8]), o($Vc, [2, 13]), { 12: [1, 28], 19: [1, 29] }, o($Vf, [2, 15], { 6: $V7, 7: $V8, 8: $V9, 9: $Va, 10: $Vb }), o($Vc, [2, 14]), { 4: 30, 7: $V0, 11: $V1, 13: $V2, 14: $V3, 15: $V4, 16: $V5, 17: $V6 }, o($Vf, [2, 16], { 6: $V7, 7: $V8, 8: $V9, 9: $Va, 10: $Vb })],\n        defaultActions: { 10: [2, 1] },\n        parseError: function parseError(str, hash) {\n            if (hash.recoverable) {\n                this.trace(str);\n            } else {\n                var error = new Error(str);\n                error.hash = hash;\n                throw error;\n            }\n        },\n        parse: function parse(input) {\n            var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;\n            var args = lstack.slice.call(arguments, 1);\n            var lexer = Object.create(this.lexer);\n            var sharedState = { yy: {} };\n            for (var k in this.yy) {\n                if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n                    sharedState.yy[k] = this.yy[k];\n                }\n            }\n            lexer.setInput(input, sharedState.yy);\n            sharedState.yy.lexer = lexer;\n            sharedState.yy.parser = this;\n            if (typeof lexer.yylloc == 'undefined') {\n                lexer.yylloc = {};\n            }\n            var yyloc = lexer.yylloc;\n            lstack.push(yyloc);\n            var ranges = lexer.options && lexer.options.ranges;\n            if (typeof sharedState.yy.parseError === 'function') {\n                this.parseError = sharedState.yy.parseError;\n            } else {\n                this.parseError = Object.getPrototypeOf(this).parseError;\n            }\n            function popStack(n) {\n                stack.length = stack.length - 2 * n;\n                vstack.length = vstack.length - n;\n                lstack.length = lstack.length - n;\n            }\n            _token_stack:\n            var lex = function () {\n                var token;\n                token = lexer.lex() || EOF;\n                if (typeof token !== 'number') {\n                    token = self.symbols_[token] || token;\n                }\n                return token;\n            };\n            var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n            while (true) {\n                state = stack[stack.length - 1];\n                if (this.defaultActions[state]) {\n                    action = this.defaultActions[state];\n                } else {\n                    if (symbol === null || typeof symbol == 'undefined') {\n                        symbol = lex();\n                    }\n                    action = table[state] && table[state][symbol];\n                }\n                if (typeof action === 'undefined' || !action.length || !action[0]) {\n                    var errStr = '';\n                    expected = [];\n                    for (p in table[state]) {\n                        if (this.terminals_[p] && p > TERROR) {\n                            expected.push('\\'' + this.terminals_[p] + '\\'');\n                        }\n                    }\n                    if (lexer.showPosition) {\n                        errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\n                    } else {\n                        errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\n                    }\n                    this.parseError(errStr, {\n                        text: lexer.match,\n                        token: this.terminals_[symbol] || symbol,\n                        line: lexer.yylineno,\n                        loc: yyloc,\n                        expected: expected\n                    });\n                }\n                if (action[0] instanceof Array && action.length > 1) {\n                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);\n                }\n                switch (action[0]) {\n                    case 1:\n                        stack.push(symbol);\n                        vstack.push(lexer.yytext);\n                        lstack.push(lexer.yylloc);\n                        stack.push(action[1]);\n                        symbol = null;\n                        if (!preErrorSymbol) {\n                            yyleng = lexer.yyleng;\n                            yytext = lexer.yytext;\n                            yylineno = lexer.yylineno;\n                            yyloc = lexer.yylloc;\n                            if (recovering > 0) {\n                                recovering--;\n                            }\n                        } else {\n                            symbol = preErrorSymbol;\n                            preErrorSymbol = null;\n                        }\n                        break;\n                    case 2:\n                        len = this.productions_[action[1]][1];\n                        yyval.$ = vstack[vstack.length - len];\n                        yyval._$ = {\n                            first_line: lstack[lstack.length - (len || 1)].first_line,\n                            last_line: lstack[lstack.length - 1].last_line,\n                            first_column: lstack[lstack.length - (len || 1)].first_column,\n                            last_column: lstack[lstack.length - 1].last_column\n                        };\n                        if (ranges) {\n                            yyval._$.range = [\n                                lstack[lstack.length - (len || 1)].range[0],\n                                lstack[lstack.length - 1].range[1]\n                            ];\n                        }\n                        r = this.performAction.apply(yyval, [\n                            yytext,\n                            yyleng,\n                            yylineno,\n                            sharedState.yy,\n                            action[1],\n                            vstack,\n                            lstack\n                        ].concat(args));\n                        if (typeof r !== 'undefined') {\n                            return r;\n                        }\n                        if (len) {\n                            stack = stack.slice(0, -1 * len * 2);\n                            vstack = vstack.slice(0, -1 * len);\n                            lstack = lstack.slice(0, -1 * len);\n                        }\n                        stack.push(this.productions_[action[1]][0]);\n                        vstack.push(yyval.$);\n                        lstack.push(yyval._$);\n                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n                        stack.push(newState);\n                        break;\n                    case 3:\n                        return true;\n                }\n            }\n            return true;\n        }\n    };\n    /* generated by jison-lex 0.3.4 */\n    var lexer = (function () {\n        var lexer = ({\n\n            EOF: 1,\n\n            parseError: function parseError(str, hash) {\n                if (this.yy.parser) {\n                    this.yy.parser.parseError(str, hash);\n                } else {\n                    throw new Error(str);\n                }\n            },\n\n            // resets the lexer, sets new input\n            setInput: function (input, yy) {\n                this.yy = yy || this.yy || {};\n                this._input = input;\n                this._more = this._backtrack = this.done = false;\n                this.yylineno = this.yyleng = 0;\n                this.yytext = this.matched = this.match = '';\n                this.conditionStack = ['INITIAL'];\n                this.yylloc = {\n                    first_line: 1,\n                    first_column: 0,\n                    last_line: 1,\n                    last_column: 0\n                };\n                if (this.options.ranges) {\n                    this.yylloc.range = [0, 0];\n                }\n                this.offset = 0;\n                return this;\n            },\n\n            // consumes and returns one char from the input\n            input: function () {\n                var ch = this._input[0];\n                this.yytext += ch;\n                this.yyleng++;\n                this.offset++;\n                this.match += ch;\n                this.matched += ch;\n                var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n                if (lines) {\n                    this.yylineno++;\n                    this.yylloc.last_line++;\n                } else {\n                    this.yylloc.last_column++;\n                }\n                if (this.options.ranges) {\n                    this.yylloc.range[1]++;\n                }\n\n                this._input = this._input.slice(1);\n                return ch;\n            },\n\n            // unshifts one char (or a string) into the input\n            unput: function (ch) {\n                var len = ch.length;\n                var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n                this._input = ch + this._input;\n                this.yytext = this.yytext.substr(0, this.yytext.length - len);\n                //this.yyleng -= len;\n                this.offset -= len;\n                var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n                this.match = this.match.substr(0, this.match.length - 1);\n                this.matched = this.matched.substr(0, this.matched.length - 1);\n\n                if (lines.length - 1) {\n                    this.yylineno -= lines.length - 1;\n                }\n                var r = this.yylloc.range;\n\n                this.yylloc = {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.yylineno + 1,\n                    first_column: this.yylloc.first_column,\n                    last_column: lines ?\n                        (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                        + oldLines[oldLines.length - lines.length].length - lines[0].length :\n                        this.yylloc.first_column - len\n                };\n\n                if (this.options.ranges) {\n                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n                }\n                this.yyleng = this.yytext.length;\n                return this;\n            },\n\n            // When called from action, caches matched text and appends it on next action\n            more: function () {\n                this._more = true;\n                return this;\n            },\n\n            // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\n            reject: function () {\n                if (this.options.backtrack_lexer) {\n                    this._backtrack = true;\n                } else {\n                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                        text: \"\",\n                        token: null,\n                        line: this.yylineno\n                    });\n\n                }\n                return this;\n            },\n\n            // retain first n characters of the match\n            less: function (n) {\n                this.unput(this.match.slice(n));\n            },\n\n            // displays already matched input, i.e. for error messages\n            pastInput: function () {\n                var past = this.matched.substr(0, this.matched.length - this.match.length);\n                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\\n/g, \"\");\n            },\n\n            // displays upcoming input, i.e. for error messages\n            upcomingInput: function () {\n                var next = this.match;\n                if (next.length < 20) {\n                    next += this._input.substr(0, 20 - next.length);\n                }\n                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n            },\n\n            // displays the character position where the lexing error occurred, i.e. for error messages\n            showPosition: function () {\n                var pre = this.pastInput();\n                var c = new Array(pre.length + 1).join(\"-\");\n                return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n            },\n\n            // test the lexed token: return FALSE when not a match, otherwise return token\n            test_match: function (match, indexed_rule) {\n                var token,\n                    lines,\n                    backup;\n\n                if (this.options.backtrack_lexer) {\n                    // save context\n                    backup = {\n                        yylineno: this.yylineno,\n                        yylloc: {\n                            first_line: this.yylloc.first_line,\n                            last_line: this.last_line,\n                            first_column: this.yylloc.first_column,\n                            last_column: this.yylloc.last_column\n                        },\n                        yytext: this.yytext,\n                        match: this.match,\n                        matches: this.matches,\n                        matched: this.matched,\n                        yyleng: this.yyleng,\n                        offset: this.offset,\n                        _more: this._more,\n                        _input: this._input,\n                        yy: this.yy,\n                        conditionStack: this.conditionStack.slice(0),\n                        done: this.done\n                    };\n                    if (this.options.ranges) {\n                        backup.yylloc.range = this.yylloc.range.slice(0);\n                    }\n                }\n\n                lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n                if (lines) {\n                    this.yylineno += lines.length;\n                }\n                this.yylloc = {\n                    first_line: this.yylloc.last_line,\n                    last_line: this.yylineno + 1,\n                    first_column: this.yylloc.last_column,\n                    last_column: lines ?\n                        lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                        this.yylloc.last_column + match[0].length\n                };\n                this.yytext += match[0];\n                this.match += match[0];\n                this.matches = match;\n                this.yyleng = this.yytext.length;\n                if (this.options.ranges) {\n                    this.yylloc.range = [this.offset, this.offset += this.yyleng];\n                }\n                this._more = false;\n                this._backtrack = false;\n                this._input = this._input.slice(match[0].length);\n                this.matched += match[0];\n                token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n                if (this.done && this._input) {\n                    this.done = false;\n                }\n                if (token) {\n                    return token;\n                } else if (this._backtrack) {\n                    // recover context\n                    for (var k in backup) {\n                        this[k] = backup[k];\n                    }\n                    return false; // rule action called reject() implying the next rule should be tested instead.\n                }\n                return false;\n            },\n\n            // return next match in input\n            next: function () {\n                if (this.done) {\n                    return this.EOF;\n                }\n                if (!this._input) {\n                    this.done = true;\n                }\n\n                var token,\n                    match,\n                    tempMatch,\n                    index;\n                if (!this._more) {\n                    this.yytext = '';\n                    this.match = '';\n                }\n                var rules = this._currentRules();\n                for (var i = 0; i < rules.length; i++) {\n                    tempMatch = this._input.match(this.rules[rules[i]]);\n                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                        match = tempMatch;\n                        index = i;\n                        if (this.options.backtrack_lexer) {\n                            token = this.test_match(tempMatch, rules[i]);\n                            if (token !== false) {\n                                return token;\n                            } else if (this._backtrack) {\n                                match = false;\n                                continue; // rule action called reject() implying a rule MISmatch.\n                            } else {\n                                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                                return false;\n                            }\n                        } else if (!this.options.flex) {\n                            break;\n                        }\n                    }\n                }\n                if (match) {\n                    token = this.test_match(match, rules[index]);\n                    if (token !== false) {\n                        return token;\n                    }\n                    // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                    return false;\n                }\n                if (this._input === \"\") {\n                    return this.EOF;\n                } else {\n                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                        text: \"\",\n                        token: null,\n                        line: this.yylineno\n                    });\n                }\n            },\n\n            // return next match that has a token\n            lex: function lex() {\n                var r = this.next();\n                if (r) {\n                    return r;\n                } else {\n                    return this.lex();\n                }\n            },\n\n            // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\n            begin: function begin(condition) {\n                this.conditionStack.push(condition);\n            },\n\n            // pop the previously active lexer condition state off the condition stack\n            popState: function popState() {\n                var n = this.conditionStack.length - 1;\n                if (n > 0) {\n                    return this.conditionStack.pop();\n                } else {\n                    return this.conditionStack[0];\n                }\n            },\n\n            // produce the lexer rule set which is active for the currently active lexer condition state\n            _currentRules: function _currentRules() {\n                if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n                } else {\n                    return this.conditions[\"INITIAL\"].rules;\n                }\n            },\n\n            // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\n            topState: function topState(n) {\n                n = this.conditionStack.length - 1 - Math.abs(n || 0);\n                if (n >= 0) {\n                    return this.conditionStack[n];\n                } else {\n                    return \"INITIAL\";\n                }\n            },\n\n            // alias for begin(condition)\n            pushState: function pushState(condition) {\n                this.begin(condition);\n            },\n\n            // return the number of states currently on the stack\n            stateStackSize: function stateStackSize() {\n                return this.conditionStack.length;\n            },\n            options: {},\n            performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {\n                var YYSTATE = YY_START;\n                switch ($avoiding_name_collisions) {\n                    case 0:/* skip whitespace */\n                        break;\n                    case 1: return 13;\n                        break;\n                    case 2: return 8;\n                        break;\n                    case 3: return 9;\n                        break;\n                    case 4: return 7;\n                        break;\n                    case 5: return 6;\n                        break;\n                    case 6: return 10;\n                        break;\n                    case 7: return 11;\n                        break;\n                    case 8: return 12;\n                        break;\n                    case 9: return 15;\n                        break;\n                    case 10: return 14;\n                        break;\n                    case 11: return 17;\n                        break;\n                    case 12: return 16;\n                        break;\n                    case 13: return 5;\n                        break;\n                }\n            },\n            rules: [/^(?:\\s+)/, /^(?:[0-9]+(\\.[0-9]+)?\\b)/, /^(?:\\*)/, /^(?:\\/)/, /^(?:-)/, /^(?:\\+)/, /^(?:\\^)/, /^(?:\\()/, /^(?:\\))/, /^(?:PI\\b)/, /^(?:E\\b)/, /^(?:[a-zA-Z][a-zA-Z0-9]*)/, /^(?:\\$[a-zA-Z0-9])/, /^(?:$)/],\n            conditions: { \"INITIAL\": { \"rules\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], \"inclusive\": true } }\n        });\n        return lexer;\n    })();\n    parser.lexer = lexer;\n    function Parser() {\n        this.yy = {};\n    }\n    Parser.prototype = parser; parser.Parser = Parser;\n    return new Parser;\n})();\n\n\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\n    exports.parser = formulaParser;\n    exports.Parser = formulaParser.Parser;\n    exports.parse = function () { return formulaParser.parse.apply(formulaParser, arguments); };\n}"]},"metadata":{},"sourceType":"module"}