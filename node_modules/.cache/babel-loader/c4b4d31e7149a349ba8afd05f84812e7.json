{"ast":null,"code":"var _jsxFileName = \"/Users/giovannycerna/Desktop/Challenge - Calculator [React]/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport * as Parser from \"./parser/formula-parser.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst parse = Parser.parse;\n\nfunction App() {\n  _s();\n\n  let [formula, formulaChange] = useState(\"($b + SQRT (SQR($b) - 4 * $a)) / (2 * $a)\" //\"1 + 3 + 4\"\n  );\n  let [syntaxTree, syntaxTreeChange] = useState(\"\");\n  let [syntaxTreeJson, syntaxTreeJsonChange] = useState(null);\n  let [visualizerOutput, visualizerChange] = useState(\"\");\n\n  const updateAst = () => {\n    console.log(\"creating ast view...\");\n    const newSyntaxTree = parse(formula);\n    syntaxTreeChange(newSyntaxTree);\n    console.log(\"The ast is: \", syntaxTree);\n    syntaxTreeJsonChange(JSON.stringify(newSyntaxTree, null, 2));\n  };\n\n  const convertAstToFormula = () => {\n    console.log(\"converting ast to string...\"); //JSON.parse(syntaxTreeJson);\n\n    let formulaString = \"\";\n\n    const createFormulaString = node => {\n      var _ref, _node$value;\n\n      // use Inorder traversal for tree\n      if (!node) return;\n      createFormulaString(node.left);\n\n      if ((_ref = (_node$value = node.value) !== null && _node$value !== void 0 ? _node$value : getOperator(node.type)) !== null && _ref !== void 0 ? _ref : node.name) {\n        var _ref2, _node$value2;\n\n        expr += (_ref2 = (_node$value2 = node.value) !== null && _node$value2 !== void 0 ? _node$value2 : getOperator(node.type)) !== null && _ref2 !== void 0 ? _ref2 : node.name;\n      } // special casing for parenthesis\n\n\n      if (node.expression) {\n        expr += \"(\";\n        createFormulaString(node.expression);\n        expr += \")\";\n      } // special casing for parenthesis\n\n\n      if (node.arguments) {\n        expr += \"(\";\n        createFormulaString(node.arguments[0]);\n        expr += \")\";\n      }\n\n      createFormulaString(node.right);\n    };\n\n    createFormulaString(JSON.parse(syntaxTreeJson));\n    visualizerChange(formulaString);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"formulizer\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Welcome to the formulizer!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Input formula\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        cols: 100,\n        rows: 8,\n        value: formula,\n        onChange: event => formulaChange(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: updateAst,\n        children: \"Parse and update AST View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Syntax tree\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      style: {\n        maxHheight: \"300px\",\n        overflowy: \"auto\",\n        backgroundColor: \"#eeeeee\"\n      },\n      children: syntaxTreeJson\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: convertAstToFormula,\n        children: \"Convert AST to Formula\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Visualizer-to-Formula\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: visualizerOutput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"azVscUXJ6rqpTWgCD5bXLobT3Hs=\");\n\n_c = App;\nexport default App; // const customDisplay = (value) => {\n//   return (\n//     <span>\n//       {value}\n//       <button>x</button>\n//     </span>\n//   );\n// };\n// const displayTree = (node) => {\n//   if (!node) return null;\n//   switch (node.type) {\n//     case \"FUNCTION\":\n//       return (\n//         <span>\n//           {customDisplay(node.name, true)}({node.arguments.map(displayTree)})\n//         </span>\n//       );\n//     case \"PAREN\":\n//       return <span>({displayTree(node.expression)})</span>;\n//     case \"VARIABLE\":\n//       return customDisplay(node.name); //<span> {node.name}</span>;\n//     case \"NUMBER\":\n//       return customDisplay(node.value); //<span> {node.value}</span>;\n//     case \"ADDITION\":\n//       return (\n//         <span>\n//           {displayTree(node.left)}+{displayTree(node.right)}\n//         </span>\n//       );\n//     case \"DIVISION\":\n//       return (\n//         <span>\n//           {displayTree(node.left)}/{displayTree(node.right)}\n//         </span>\n//       );\n//     case \"SUBTRACTION\":\n//       return (\n//         <span>\n//           {displayTree(node.left)}-{displayTree(node.right)}\n//         </span>\n//       );\n//     case \"MULTIPLICATION\":\n//       return (\n//         <span>\n//           {displayTree(node.left)}*{displayTree(node.right)}\n//         </span>\n//       );\n//     default:\n//       return null;\n//   }\n// };\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/giovannycerna/Desktop/Challenge - Calculator [React]/src/App.js"],"names":["useState","Parser","parse","App","formula","formulaChange","syntaxTree","syntaxTreeChange","syntaxTreeJson","syntaxTreeJsonChange","visualizerOutput","visualizerChange","updateAst","console","log","newSyntaxTree","JSON","stringify","convertAstToFormula","formulaString","createFormulaString","node","left","value","getOperator","type","name","expr","expression","arguments","right","event","target","maxHheight","overflowy","backgroundColor"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport \"./App.css\";\nimport * as Parser from \"./parser/formula-parser.js\";\nconst parse = Parser.parse;\n\nfunction App() {\n  let [formula, formulaChange] = useState(\n    \"($b + SQRT (SQR($b) - 4 * $a)) / (2 * $a)\"\n    //\"1 + 3 + 4\"\n  );\n  let [syntaxTree, syntaxTreeChange] = useState(\"\");\n  let [syntaxTreeJson, syntaxTreeJsonChange] = useState(null);\n  let [visualizerOutput, visualizerChange] = useState(\"\");\n\n  const updateAst = () => {\n    console.log(\"creating ast view...\");\n    const newSyntaxTree = parse(formula);\n    syntaxTreeChange(newSyntaxTree);\n\n    console.log(\"The ast is: \", syntaxTree);\n    syntaxTreeJsonChange(JSON.stringify(newSyntaxTree, null, 2));\n  };\n\n  const convertAstToFormula = () => {\n    console.log(\"converting ast to string...\");\n    //JSON.parse(syntaxTreeJson);\n    let formulaString = \"\";\n\n    const createFormulaString = (node) => {\n      // use Inorder traversal for tree\n      if (!node) return;\n      createFormulaString(node.left);\n      if (node.value ?? getOperator(node.type) ?? node.name) {\n        expr += node.value ?? getOperator(node.type) ?? node.name;\n      }\n      // special casing for parenthesis\n      if (node.expression) {\n        expr += \"(\";\n        createFormulaString(node.expression);\n        expr += \")\";\n      }\n      // special casing for parenthesis\n      if (node.arguments) {\n        expr += \"(\";\n        createFormulaString(node.arguments[0]);\n        expr += \")\";\n      }\n      createFormulaString(node.right);\n    };\n\n    createFormulaString(JSON.parse(syntaxTreeJson));\n    visualizerChange(formulaString);\n  };\n\n  return (\n    <div className=\"formulizer\">\n      <h1>Welcome to the formulizer!</h1>\n      <h3>Input formula</h3>\n      <p>\n        <textarea\n          cols={100}\n          rows={8}\n          value={formula}\n          onChange={(event) => formulaChange(event.target.value)}\n        />{\" \"}\n        <br />\n      </p>\n      <p>\n        <button onClick={updateAst}>Parse and update AST View</button>\n      </p>\n      <h3>Syntax tree</h3>\n      <pre\n        style={{\n          maxHheight: \"300px\",\n          overflowy: \"auto\",\n          backgroundColor: \"#eeeeee\",\n        }}\n      >\n        {syntaxTreeJson}\n      </pre>\n      <p>\n        <button onClick={convertAstToFormula}>Convert AST to Formula</button>\n      </p>\n      <h3>Visualizer-to-Formula</h3>\n      <p>{visualizerOutput}</p>\n    </div>\n  );\n}\n\nexport default App;\n\n// const customDisplay = (value) => {\n//   return (\n//     <span>\n//       {value}\n//       <button>x</button>\n//     </span>\n//   );\n// };\n\n// const displayTree = (node) => {\n//   if (!node) return null;\n\n//   switch (node.type) {\n//     case \"FUNCTION\":\n//       return (\n//         <span>\n//           {customDisplay(node.name, true)}({node.arguments.map(displayTree)})\n//         </span>\n//       );\n//     case \"PAREN\":\n//       return <span>({displayTree(node.expression)})</span>;\n\n//     case \"VARIABLE\":\n//       return customDisplay(node.name); //<span> {node.name}</span>;\n\n//     case \"NUMBER\":\n//       return customDisplay(node.value); //<span> {node.value}</span>;\n\n//     case \"ADDITION\":\n//       return (\n//         <span>\n//           {displayTree(node.left)}+{displayTree(node.right)}\n//         </span>\n//       );\n\n//     case \"DIVISION\":\n//       return (\n//         <span>\n//           {displayTree(node.left)}/{displayTree(node.right)}\n//         </span>\n//       );\n\n//     case \"SUBTRACTION\":\n//       return (\n//         <span>\n//           {displayTree(node.left)}-{displayTree(node.right)}\n//         </span>\n//       );\n\n//     case \"MULTIPLICATION\":\n//       return (\n//         <span>\n//           {displayTree(node.left)}*{displayTree(node.right)}\n//         </span>\n//       );\n//     default:\n//       return null;\n//   }\n// };\n"]},"metadata":{},"sourceType":"module"}