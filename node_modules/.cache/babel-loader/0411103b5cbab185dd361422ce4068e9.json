{"ast":null,"code":"var _jsxFileName = \"/Users/giovannycerna/Desktop/Challenge - Calculator [React]/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport * as Parser from \"./parser/formula-parser.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst parse = Parser.parse;\n\nfunction getOperator(type) {\n  if (type === \"ADDITION\") return \"+\";else if (type === \"DIVISION\") return \"/\";else if (type === \"MULTIPLICATION\") return \"*\";else if (type === \"SUBTRACTION\") return \"-\";else return;\n}\n\nfunction getValue(node) {\n  if (node.type !== \"FUNCTION\" || node.type !== \"PAREN\") return node.name || node.value;\n}\n\nfunction getSpan(name, size) {\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    style: {\n      paddingBottom: size,\n      border: \"0.5px solid\"\n    },\n    children: name\n  }, size, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n\nfunction App() {\n  _s();\n\n  let [formula, formulaChange] = useState(\"($a+SQRT(SQR($b)-4*$c))/(2*$d)\" //\"1 + 2 + 3 + 4 + 5 + 6\"\n  //\"($c+SQRT(SQR($b)-4*$a))\"\n  );\n  let [syntaxTree, syntaxTreeChange] = useState(\"\");\n  let [syntaxTreeJson, syntaxTreeJsonChange] = useState(null);\n  let [visualizerOutput, visualizerChange] = useState(\"\");\n  let [listItem, updateList] = useState(\"\");\n  const styles = {\n    treeLayout: {\n      border: \"0.5px solid\"\n    },\n    container: {\n      height: 30,\n      width: 100\n    }\n  };\n\n  const updateAst = () => {\n    //console.log(\"creating ast view...\");\n    const newSyntaxTree = parse(formula);\n    syntaxTreeChange(newSyntaxTree); //console.log(\"The ast is: \", syntaxTree);\n\n    syntaxTreeJsonChange(JSON.stringify(newSyntaxTree, null, 2)); // console.log(expr);\n  };\n\n  const trees = [];\n\n  const dfs = node => {\n    if (!node) return; /// special case for expression and arguements\n    // get subtrees\n\n    dfs(node.left);\n\n    if (node.left && node.right) {\n      // add for vairable name\n      if (node.left.value && node.right.value) {\n        trees.push(node.left.value + node.type + node.right.value);\n      } else if (node.right.value) {\n        trees.push(node.type + node.right.value);\n      } else if (node.left.value) {\n        trees.push(node.left.value + node.type);\n      }\n    }\n\n    dfs(node.right);\n  };\n\n  const convertAstToFormula = () => {\n    console.log(\"converting ast to string...\"); // create string expression from tree\n\n    let expr = \"\";\n    let formulaList = [];\n\n    const createFormulaString = node => {\n      var _ref, _node$value;\n\n      // use Inorder traversal for tree\n      if (!node) return;\n      createFormulaString(node.left);\n\n      if ((_ref = (_node$value = node.value) !== null && _node$value !== void 0 ? _node$value : getOperator(node.type)) !== null && _ref !== void 0 ? _ref : node.name) {\n        var _ref2, _node$value2;\n\n        expr += (_ref2 = (_node$value2 = node.value) !== null && _node$value2 !== void 0 ? _node$value2 : getOperator(node.type)) !== null && _ref2 !== void 0 ? _ref2 : node.name;\n      } // special casing for parenthesis\n\n\n      if (node.expression) {\n        expr += \"(\";\n        createFormulaString(node.expression);\n        expr += \")\";\n      } // special casing for parenthesis\n\n\n      if (node.arguments) {\n        expr += \"(\";\n        createFormulaString(node.arguments[0]);\n        expr += \")\";\n      }\n\n      createFormulaString(node.right);\n    };\n\n    createFormulaString(JSON.parse(syntaxTreeJson));\n    dfs(JSON.parse(syntaxTreeJson));\n    trees.forEach(item => {\n      console.log(item);\n    });\n    visualizerChange(expr);\n    updateList(formulaList);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"formulizer\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Welcome to the formulizer!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Input formula\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        cols: 100,\n        rows: 8,\n        value: formula,\n        onChange: event => formulaChange(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: updateAst,\n        children: \"Parse and update AST View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Syntax tree\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      style: {\n        maxHheight: \"300px\",\n        overflowy: \"auto\",\n        backgroundColor: \"#eeeeee\"\n      },\n      children: syntaxTreeJson\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: convertAstToFormula,\n        children: \"Convert AST to Formula\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Visualizer-to-Formula\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: visualizerOutput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.container,\n      children: listItem\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"2fTeABMudSfV4mA+N/F0G7A8guA=\");\n\n_c = App;\nexport default App; // import { useState } from \"react\";\n// import \"./App.css\";\n// import * as Parser from \"./parser/formula-parser.js\";\n// const parse = Parser.parse;\n// function App() {\n//   let [formula, formulaChange] = useState(\n//     //\"($b + SQRT (SQR($b) - 4 * $a)) / (2 * $a)\"\n//     \"1 + 3 + 4\"\n//   );\n//   let [syntaxTree, syntaxTreeChange] = useState(\"\");\n//   let [syntaxTreeJson, syntaxTreeJsonChange] = useState(null);\n//   let [visualizerOutput, visualizerChange] = useState(\"\");\n//   const updateAst = () => {\n//     console.log(\"creating ast view...\");\n//     const newSyntaxTree = parse(formula);\n//     syntaxTreeChange(newSyntaxTree);\n//     console.log(\"The ast is: \", syntaxTree);\n//     syntaxTreeJsonChange(JSON.stringify(newSyntaxTree, null, 2));\n//   };\n//   const convterToString = (node) => {\n//     if (!node) return;\n//   };\n//   const convertAstToFormula = () => {\n//     console.log(\"converting ast to string...\");\n//     //JSON.parse(syntaxTreeJson);\n//     // chose to create string and display\n//     // use substring to remove from equation\n//     const dfs = (node) => {\n//       if (!node) return;\n//       dfs(node.left);\n//       if (node.left && node.right) {\n//         if (node.left.value && node.right.value) {\n//           trees.push(node.left.value + node.type + node.right.value);\n//         } else if (node.right.value) {\n//           trees.push(node.type + node.right.value);\n//         } else if (node.left.value) {\n//           trees.push(node.left.value + node.type);\n//         }\n//       }\n//       dfs(node.right);\n//     };\n//     const formula = visualizerChange();\n//   };\n//   return (\n//     <div className=\"formulizer\">\n//       <h1>Welcome to the formulizer!</h1>\n//       <h3>Input formula</h3>\n//       <p>\n//         <textarea\n//           cols={100}\n//           rows={8}\n//           value={formula}\n//           onChange={(event) => formulaChange(event.target.value)}\n//         />{\" \"}\n//         <br />\n//       </p>\n//       <p>\n//         <button onClick={updateAst}>Parse and update AST View</button>\n//       </p>\n//       <h3>Syntax tree</h3>\n//       <pre\n//         style={{\n//           maxHheight: \"300px\",\n//           overflowy: \"auto\",\n//           backgroundColor: \"#eeeeee\",\n//         }}\n//       >\n//         {syntaxTreeJson}\n//       </pre>\n//       <p>\n//         <button onClick={convertAstToFormula}>Convert AST to Formula</button>\n//       </p>\n//       <h3>Visualizer-to-Formula</h3>\n//       <p>{visualizerOutput}</p>\n//     </div>\n//   );\n// }\n// export default App;\n// // const customDisplay = (value) => {\n// //   return (\n// //     <span>\n// //       {value}\n// //       <button>x</button>\n// //     </span>\n// //   );\n// // };\n// // const displayTree = (node) => {\n// //   if (!node) return null;\n// //   switch (node.type) {\n// //     case \"FUNCTION\":\n// //       return (\n// //         <span>\n// //           {customDisplay(node.name, true)}({node.arguments.map(displayTree)})\n// //         </span>\n// //       );\n// //     case \"PAREN\":\n// //       return <span>({displayTree(node.expression)})</span>;\n// //     case \"VARIABLE\":\n// //       return customDisplay(node.name); //<span> {node.name}</span>;\n// //     case \"NUMBER\":\n// //       return customDisplay(node.value); //<span> {node.value}</span>;\n// //     case \"ADDITION\":\n// //       return (\n// //         <span>\n// //           {displayTree(node.left)}+{displayTree(node.right)}\n// //         </span>\n// //       );\n// //     case \"DIVISION\":\n// //       return (\n// //         <span>\n// //           {displayTree(node.left)}/{displayTree(node.right)}\n// //         </span>\n// //       );\n// //     case \"SUBTRACTION\":\n// //       return (\n// //         <span>\n// //           {displayTree(node.left)}-{displayTree(node.right)}\n// //         </span>\n// //       );\n// //     case \"MULTIPLICATION\":\n// //       return (\n// //         <span>\n// //           {displayTree(node.left)}*{displayTree(node.right)}\n// //         </span>\n// //       );\n// //     default:\n// //       return null;\n// //   }\n// // };\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/giovannycerna/Desktop/Challenge - Calculator [React]/src/App.js"],"names":["useState","Parser","parse","getOperator","type","getValue","node","name","value","getSpan","size","paddingBottom","border","App","formula","formulaChange","syntaxTree","syntaxTreeChange","syntaxTreeJson","syntaxTreeJsonChange","visualizerOutput","visualizerChange","listItem","updateList","styles","treeLayout","container","height","width","updateAst","newSyntaxTree","JSON","stringify","trees","dfs","left","right","push","convertAstToFormula","console","log","expr","formulaList","createFormulaString","expression","arguments","forEach","item","event","target","maxHheight","overflowy","backgroundColor"],"mappings":"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":["import { useState } from \"react\";\nimport \"./App.css\";\nimport * as Parser from \"./parser/formula-parser.js\";\nconst parse = Parser.parse;\n\nfunction getOperator(type) {\n  if (type === \"ADDITION\") return \"+\";\n  else if (type === \"DIVISION\") return \"/\";\n  else if (type === \"MULTIPLICATION\") return \"*\";\n  else if (type === \"SUBTRACTION\") return \"-\";\n  else return;\n}\n\nfunction getValue(node) {\n  if (node.type !== \"FUNCTION\" || node.type !== \"PAREN\")\n    return node.name || node.value;\n}\n\nfunction getSpan(name, size) {\n  return (\n    <span style={{ paddingBottom: size, border: \"0.5px solid\" }} key={size}>\n      {name}\n    </span>\n  );\n}\n\nfunction App() {\n  let [formula, formulaChange] = useState(\n    \"($a+SQRT(SQR($b)-4*$c))/(2*$d)\"\n    //\"1 + 2 + 3 + 4 + 5 + 6\"\n    //\"($c+SQRT(SQR($b)-4*$a))\"\n  );\n  let [syntaxTree, syntaxTreeChange] = useState(\"\");\n  let [syntaxTreeJson, syntaxTreeJsonChange] = useState(null);\n  let [visualizerOutput, visualizerChange] = useState(\"\");\n  let [listItem, updateList] = useState(\"\");\n  const styles = {\n    treeLayout: {\n      border: \"0.5px solid\",\n    },\n    container: {\n      height: 30,\n      width: 100,\n    },\n  };\n  const updateAst = () => {\n    //console.log(\"creating ast view...\");\n    const newSyntaxTree = parse(formula);\n    syntaxTreeChange(newSyntaxTree);\n\n    //console.log(\"The ast is: \", syntaxTree);\n    syntaxTreeJsonChange(JSON.stringify(newSyntaxTree, null, 2));\n    // console.log(expr);\n  };\n\n  const trees = [];\n  const dfs = (node) => {\n    if (!node) return;\n    /// special case for expression and arguements\n    // get subtrees\n    dfs(node.left);\n    if (node.left && node.right) {\n      // add for vairable name\n      if (node.left.value && node.right.value) {\n        trees.push(node.left.value + node.type + node.right.value);\n      } else if (node.right.value) {\n        trees.push(node.type + node.right.value);\n      } else if (node.left.value) {\n        trees.push(node.left.value + node.type);\n      }\n    }\n    dfs(node.right);\n  };\n\n  const convertAstToFormula = () => {\n    console.log(\"converting ast to string...\");\n    // create string expression from tree\n    let expr = \"\";\n    let formulaList = [];\n\n    const createFormulaString = (node) => {\n      // use Inorder traversal for tree\n      if (!node) return;\n      createFormulaString(node.left);\n      if (node.value ?? getOperator(node.type) ?? node.name) {\n        expr += node.value ?? getOperator(node.type) ?? node.name;\n      }\n      // special casing for parenthesis\n      if (node.expression) {\n        expr += \"(\";\n        createFormulaString(node.expression);\n        expr += \")\";\n      }\n      // special casing for parenthesis\n      if (node.arguments) {\n        expr += \"(\";\n        createFormulaString(node.arguments[0]);\n        expr += \")\";\n      }\n      createFormulaString(node.right);\n    };\n\n    createFormulaString(JSON.parse(syntaxTreeJson));\n    dfs(JSON.parse(syntaxTreeJson));\n\n    trees.forEach((item) => {\n      console.log(item);\n    });\n\n    visualizerChange(expr);\n    updateList(formulaList);\n  };\n\n  return (\n    <div className=\"formulizer\">\n      <h1>Welcome to the formulizer!</h1>\n      <h3>Input formula</h3>\n      <p>\n        <textarea\n          cols={100}\n          rows={8}\n          value={formula}\n          onChange={(event) => formulaChange(event.target.value)}\n        />{\" \"}\n        <br />\n      </p>\n      <p>\n        <button onClick={updateAst}>Parse and update AST View</button>\n      </p>\n      <h3>Syntax tree</h3>\n      <pre\n        style={{\n          maxHheight: \"300px\",\n          overflowy: \"auto\",\n          backgroundColor: \"#eeeeee\",\n        }}\n      >\n        {syntaxTreeJson}\n      </pre>\n      <p>\n        <button onClick={convertAstToFormula}>Convert AST to Formula</button>\n      </p>\n      <h3>Visualizer-to-Formula</h3>\n      <p>{visualizerOutput}</p>\n      <div style={styles.container}>{listItem}</div>\n      {}\n    </div>\n  );\n}\n\nexport default App;\n\n// import { useState } from \"react\";\n// import \"./App.css\";\n// import * as Parser from \"./parser/formula-parser.js\";\n// const parse = Parser.parse;\n\n// function App() {\n//   let [formula, formulaChange] = useState(\n//     //\"($b + SQRT (SQR($b) - 4 * $a)) / (2 * $a)\"\n//     \"1 + 3 + 4\"\n//   );\n//   let [syntaxTree, syntaxTreeChange] = useState(\"\");\n//   let [syntaxTreeJson, syntaxTreeJsonChange] = useState(null);\n//   let [visualizerOutput, visualizerChange] = useState(\"\");\n\n//   const updateAst = () => {\n//     console.log(\"creating ast view...\");\n//     const newSyntaxTree = parse(formula);\n//     syntaxTreeChange(newSyntaxTree);\n\n//     console.log(\"The ast is: \", syntaxTree);\n//     syntaxTreeJsonChange(JSON.stringify(newSyntaxTree, null, 2));\n//   };\n\n//   const convterToString = (node) => {\n//     if (!node) return;\n//   };\n\n//   const convertAstToFormula = () => {\n//     console.log(\"converting ast to string...\");\n//     //JSON.parse(syntaxTreeJson);\n//     // chose to create string and display\n//     // use substring to remove from equation\n\n//     const dfs = (node) => {\n//       if (!node) return;\n//       dfs(node.left);\n//       if (node.left && node.right) {\n//         if (node.left.value && node.right.value) {\n//           trees.push(node.left.value + node.type + node.right.value);\n//         } else if (node.right.value) {\n//           trees.push(node.type + node.right.value);\n//         } else if (node.left.value) {\n//           trees.push(node.left.value + node.type);\n//         }\n//       }\n//       dfs(node.right);\n//     };\n\n//     const formula = visualizerChange();\n//   };\n\n//   return (\n//     <div className=\"formulizer\">\n//       <h1>Welcome to the formulizer!</h1>\n//       <h3>Input formula</h3>\n//       <p>\n//         <textarea\n//           cols={100}\n//           rows={8}\n//           value={formula}\n//           onChange={(event) => formulaChange(event.target.value)}\n//         />{\" \"}\n//         <br />\n//       </p>\n//       <p>\n//         <button onClick={updateAst}>Parse and update AST View</button>\n//       </p>\n//       <h3>Syntax tree</h3>\n//       <pre\n//         style={{\n//           maxHheight: \"300px\",\n//           overflowy: \"auto\",\n//           backgroundColor: \"#eeeeee\",\n//         }}\n//       >\n//         {syntaxTreeJson}\n//       </pre>\n//       <p>\n//         <button onClick={convertAstToFormula}>Convert AST to Formula</button>\n//       </p>\n//       <h3>Visualizer-to-Formula</h3>\n//       <p>{visualizerOutput}</p>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// // const customDisplay = (value) => {\n// //   return (\n// //     <span>\n// //       {value}\n// //       <button>x</button>\n// //     </span>\n// //   );\n// // };\n\n// // const displayTree = (node) => {\n// //   if (!node) return null;\n\n// //   switch (node.type) {\n// //     case \"FUNCTION\":\n// //       return (\n// //         <span>\n// //           {customDisplay(node.name, true)}({node.arguments.map(displayTree)})\n// //         </span>\n// //       );\n// //     case \"PAREN\":\n// //       return <span>({displayTree(node.expression)})</span>;\n\n// //     case \"VARIABLE\":\n// //       return customDisplay(node.name); //<span> {node.name}</span>;\n\n// //     case \"NUMBER\":\n// //       return customDisplay(node.value); //<span> {node.value}</span>;\n\n// //     case \"ADDITION\":\n// //       return (\n// //         <span>\n// //           {displayTree(node.left)}+{displayTree(node.right)}\n// //         </span>\n// //       );\n\n// //     case \"DIVISION\":\n// //       return (\n// //         <span>\n// //           {displayTree(node.left)}/{displayTree(node.right)}\n// //         </span>\n// //       );\n\n// //     case \"SUBTRACTION\":\n// //       return (\n// //         <span>\n// //           {displayTree(node.left)}-{displayTree(node.right)}\n// //         </span>\n// //       );\n\n// //     case \"MULTIPLICATION\":\n// //       return (\n// //         <span>\n// //           {displayTree(node.left)}*{displayTree(node.right)}\n// //         </span>\n// //       );\n// //     default:\n// //       return null;\n// //   }\n// // };\n"]},"metadata":{},"sourceType":"module"}