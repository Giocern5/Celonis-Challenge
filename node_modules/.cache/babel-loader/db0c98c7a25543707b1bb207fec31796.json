{"ast":null,"code":"var _jsxFileName = \"/Users/giovannycerna/Desktop/Challenge - Calculator [React]/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport './App.css';\nimport * as Parser from './parser/formula-parser.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst parse = Parser.parse;\n\nfunction App() {\n  _s();\n\n  let [formula, formulaChange] = useState('($b + SQRT (SQR($b) - 4 * $a)) / (2 * $a)');\n  let [syntaxTree, syntaxTreeChange] = useState('');\n  let [syntaxTreeJson, syntaxTreeJsonChange] = useState(null);\n  let [visualizerOutput, visualizerChange] = useState('');\n\n  const updateAst = () => {\n    console.log('creating ast view...');\n    const newSyntaxTree = parse(formula);\n    syntaxTreeChange(newSyntaxTree);\n    console.log('The ast is: ', syntaxTree);\n    syntaxTreeJsonChange(JSON.stringify(newSyntaxTree, null, 2));\n  };\n\n  const convertAstToFormula = () => {\n    console.log('converting ast to string...');\n    visualizerChange(\"TO BE IMPLEMENTED\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"formulizer\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Welcome to the formulizer!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Input formula\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        cols: 100,\n        rows: 8,\n        value: formula,\n        onChange: event => formulaChange(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 69\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: updateAst,\n        children: \"Parse and update AST View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 10\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Syntax tree\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      style: {\n        maxHheight: '300px',\n        overflowy: 'auto',\n        backgroundColor: '#eeeeee'\n      },\n      children: syntaxTreeJson\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: convertAstToFormula,\n        children: \"Convert AST to Formula\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 10\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Visualizer-to-Formula\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: visualizerOutput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"svO3yIgxzGSfu6HiA2zlfaOc8Ug=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/giovannycerna/Desktop/Challenge - Calculator [React]/src/App.js"],"names":["useState","Parser","parse","App","formula","formulaChange","syntaxTree","syntaxTreeChange","syntaxTreeJson","syntaxTreeJsonChange","visualizerOutput","visualizerChange","updateAst","console","log","newSyntaxTree","JSON","stringify","convertAstToFormula","event","target","value","maxHheight","overflowy","backgroundColor"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAO,WAAP;AACA,OAAO,KAAKC,MAAZ,MAAwB,4BAAxB;;AACA,MAAMC,KAAK,GAAGD,MAAM,CAACC,KAArB;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,MAAI,CAACC,OAAD,EAAUC,aAAV,IAA2BL,QAAQ,CAAC,2CAAD,CAAvC;AACA,MAAI,CAACM,UAAD,EAAaC,gBAAb,IAAiCP,QAAQ,CAAC,EAAD,CAA7C;AACA,MAAI,CAACQ,cAAD,EAAiBC,oBAAjB,IAAyCT,QAAQ,CAAC,IAAD,CAArD;AACA,MAAI,CAACU,gBAAD,EAAmBC,gBAAnB,IAAuCX,QAAQ,CAAC,EAAD,CAAnD;;AAGA,QAAMY,SAAS,GAAG,MAAM;AACtBC,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA,UAAMC,aAAa,GAAGb,KAAK,CAACE,OAAD,CAA3B;AACAG,IAAAA,gBAAgB,CAACQ,aAAD,CAAhB;AAEAF,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BR,UAA5B;AACAG,IAAAA,oBAAoB,CAACO,IAAI,CAACC,SAAL,CAAeF,aAAf,EAA8B,IAA9B,EAAoC,CAApC,CAAD,CAApB;AACD,GAPD;;AASA,QAAMG,mBAAmB,GAAG,MAAM;AAChCL,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACAH,IAAAA,gBAAgB,CAAC,mBAAD,CAAhB;AACD,GAHD;;AAKA,sBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAA,8BACE;AACE,QAAA,IAAI,EAAE,GADR;AAEE,QAAA,IAAI,EAAE,CAFR;AAGE,QAAA,KAAK,EAAEP,OAHT;AAIE,QAAA,QAAQ,EAAGe,KAAD,IAAWd,aAAa,CAACc,KAAK,CAACC,MAAN,CAAaC,KAAd;AAJpC;AAAA;AAAA;AAAA;AAAA,cADF,oBAK8D;AAAA;AAAA;AAAA;AAAA,cAL9D;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,eAUE;AAAA,6BAAG;AAAQ,QAAA,OAAO,EAAET,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAH;AAAA;AAAA;AAAA;AAAA,YAVF,eAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAXF,eAYE;AAAK,MAAA,KAAK,EAAE;AAACU,QAAAA,UAAU,EAAE,OAAb;AAAsBC,QAAAA,SAAS,EAAE,MAAjC;AAAwCC,QAAAA,eAAe,EAAE;AAAzD,OAAZ;AAAA,gBAAkFhB;AAAlF;AAAA;AAAA;AAAA;AAAA,YAZF,eAaE;AAAA,6BAAG;AAAQ,QAAA,OAAO,EAAEU,mBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAH;AAAA;AAAA;AAAA;AAAA,YAbF,eAcE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAdF,eAeE;AAAA,gBAAIR;AAAJ;AAAA;AAAA;AAAA;AAAA,YAfF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD;;GAxCQP,G;;KAAAA,G;AA0CT,eAAeA,GAAf","sourcesContent":["import { useState } from 'react';\nimport './App.css';\nimport * as Parser from './parser/formula-parser.js';\nconst parse = Parser.parse;\n\nfunction App() {\n  let [formula, formulaChange] = useState('($b + SQRT (SQR($b) - 4 * $a)) / (2 * $a)');\n  let [syntaxTree, syntaxTreeChange] = useState('');\n  let [syntaxTreeJson, syntaxTreeJsonChange] = useState(null);\n  let [visualizerOutput, visualizerChange] = useState('');\n\n\n  const updateAst = () => {\n    console.log('creating ast view...');\n    const newSyntaxTree = parse(formula);\n    syntaxTreeChange(newSyntaxTree);\n\n    console.log('The ast is: ', syntaxTree);\n    syntaxTreeJsonChange(JSON.stringify(newSyntaxTree, null, 2));\n  };\n\n  const convertAstToFormula = () => {     \n    console.log('converting ast to string...');\n    visualizerChange(\"TO BE IMPLEMENTED\");\n  };\n\n  return (\n    <div className='formulizer'>\n      <h1>Welcome to the formulizer!</h1>\n      <h3>Input formula</h3>\n      <p>\n        <textarea \n          cols={100} \n          rows={8} \n          value={formula} \n          onChange={(event) => formulaChange(event.target.value)}/> <br/>\n      </p>\n      <p><button onClick={updateAst}>Parse and update AST View</button></p>\n      <h3>Syntax tree</h3>\n      <pre style={{maxHheight: '300px', overflowy: 'auto',backgroundColor: '#eeeeee'}}>{syntaxTreeJson}</pre>\n      <p><button onClick={convertAstToFormula}>Convert AST to Formula</button></p>\n      <h3>Visualizer-to-Formula</h3>\n      <p>{visualizerOutput}</p>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}